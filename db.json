{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/str1.png","path":"img/str1.png","modified":0,"renderable":0},{"_id":"source/img/xl1.png","path":"img/xl1.png","modified":0,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"source/img/keywordsinpy.png","path":"img/keywordsinpy.png","modified":0,"renderable":0},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1656662136197},{"_id":"themes/melody/.eslintrc","hash":"cfcd1b454efdd6cc1a0d43be7bc79027b84531f7","modified":1656662136197},{"_id":"themes/melody/.gitignore","hash":"30dd5a840cf2be01d53e4054c3fe1e0ef2faf5a1","modified":1656662136198},{"_id":"themes/melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1656662136198},{"_id":"themes/melody/.npmignore","hash":"60012d0fa45c2ee34f107270c1d47a6161fb73ab","modified":1656662136198},{"_id":"themes/melody/CHANGELOG.md","hash":"74651f2362b7beb79f502d0c352827b8b29193f4","modified":1656662136199},{"_id":"themes/melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1656662136199},{"_id":"themes/melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1656662136199},{"_id":"themes/melody/README.md","hash":"9239744d3bcd86c2082809278d562c7de1595eff","modified":1656662136200},{"_id":"themes/melody/_config.yml","hash":"68808a8a87987793ab679d3922ab5130dadfb855","modified":1656662539253},{"_id":"themes/melody/package.json","hash":"4ed77eb7e9796c0872ea7f556aaf39e94a329955","modified":1656662136208},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1656662136219},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1656662136209},{"_id":"source/_posts/es6.md","hash":"39546a409be3721f320f155d2e1c7af7f1a281d8","modified":1656660979510},{"_id":"source/_posts/未命名.code-workspace","hash":"c443b9c6f002098911f0b6eae3125fed75f97552","modified":1656661476839},{"_id":"source/_posts/control-flow.md","hash":"639315272d47a974bfa2bed07e5dc9c704c16b87","modified":1656660419989},{"_id":"source/_posts/linear-algebra.md","hash":"f2bd7b12d0c181fbd85b18914dbe559ad549c9f1","modified":1656660419990},{"_id":"source/_posts/data-type.md","hash":"89352f34ce8efd6b3b5a53ae546049fb30c5e01c","modified":1656660419989},{"_id":"source/categories/index.md","hash":"4d9e58cd98b62677449d5d2b4988f2ef1cd52a89","modified":1656660419991},{"_id":"source/img/str1.png","hash":"c5276159c43fb7a0a3ba6c18a77da65caf15c63c","modified":1656660419992},{"_id":"source/img/xl1.png","hash":"e1fbac9c74efd9aacf90ae603b733b2b7a2eb2fa","modified":1656660419993},{"_id":"source/tags/index.md","hash":"db0a220f429ce4f9de9e46586a7ce14d6172f778","modified":1656660419993},{"_id":"themes/melody/.github/FUNDING.yml","hash":"e56cf70f2fc56e2433ac3bca379e2704a41c7889","modified":1656662136197},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"66c3f31c24530922420b92f5fd827f69197ee0e2","modified":1656662136198},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1656662136199},{"_id":"themes/melody/.vscode/settings.json","hash":"089087413f5b54ef1847f83e101d0e186c7b359d","modified":1656662136199},{"_id":"themes/melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1656662136200},{"_id":"themes/melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1656662136200},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1656662136200},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1656662136201},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1656662136201},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1656662136201},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1656662136201},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1656662136207},{"_id":"themes/melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1656662136208},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1656662136208},{"_id":"themes/melody/layout/post.pug","hash":"436bb1b7d14e29cba8010d3ea14df19681fbb5fe","modified":1656662136208},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1656662136208},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1656662136208},{"_id":"themes/melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1656662136209},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1656662136218},{"_id":"source/img/keywordsinpy.png","hash":"5f653a5cd32f1915bfde050940ea1d0ee6461824","modified":1656660419992},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1656662136214},{"_id":"themes/melody/.github/workflows/main.yml","hash":"58445b34089489d1870a03eeb592356dfab11725","modified":1656662136198},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1656662136202},{"_id":"themes/melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1656662136203},{"_id":"themes/melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1656662136203},{"_id":"themes/melody/layout/includes/header.pug","hash":"f440a9741eeacfa62f0a0e7ef470a104f1cb510c","modified":1656662136204},{"_id":"themes/melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1656662136204},{"_id":"themes/melody/layout/includes/head.pug","hash":"cdabb5841dc42a58b6e06df9bc4f5acf90bc8419","modified":1656662136204},{"_id":"themes/melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1656662136204},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1656662136205},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1656662136205},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1656662136206},{"_id":"themes/melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1656662136209},{"_id":"themes/melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1656662136212},{"_id":"themes/melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1656662136213},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1656662136213},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1656662136213},{"_id":"themes/melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1656662136213},{"_id":"themes/melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1656662136214},{"_id":"themes/melody/source/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1656662136214},{"_id":"themes/melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1656662136214},{"_id":"themes/melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1656662136214},{"_id":"themes/melody/source/js/scroll.js","hash":"fcc20d10c936d49c3f0cd2a97030ecaf64d213c8","modified":1656662136214},{"_id":"themes/melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1656662136215},{"_id":"themes/melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1656662136218},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1656662136218},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1656662136203},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1656662136201},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1656662136201},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"74f283727ad2096bd7ad8eb8c6f47b07f7e59b84","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1656662136202},{"_id":"themes/melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1656662136203},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1656662136203},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1656662136203},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1656662136204},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1656662136204},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1656662136205},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1656662136205},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1656662136206},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1656662136206},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1656662136206},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1656662136206},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1656662136207},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"7ef8aa16e2b3321eb175b7f64434c2fa44eff138","modified":1656662136207},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1656662136207},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1656662136207},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1656662136207},{"_id":"themes/melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1656662136209},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1656662136210},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1656662136210},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1656662136210},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1656662136210},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1656662136210},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1656662136210},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"d2f6050bf6ef80523ed9a5a0f058fa5dbaf72ea8","modified":1656662136211},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1656662136211},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"34a421a32abb8003d7d83de53f42639be4e54daf","modified":1656662136211},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1656662136211},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1656662136211},{"_id":"themes/melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1656662136212},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1656662136212},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1656662136212},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1656662136212},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1656662136215},{"_id":"themes/melody/source/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1656662136215},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1656662136215},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1656662136215},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1656662136216},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1656662136218},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1656662136218},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1656662136217},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1656662136217},{"_id":"source/_posts/javascript/functional programming/higher-order function.md","hash":"8091bb156b95fe9996ca9b6b6b58be4e9dbc8b30","modified":1656665204082},{"_id":"source/_posts/javascript/es6.md","hash":"39546a409be3721f320f155d2e1c7af7f1a281d8","modified":1656660979510},{"_id":"source/_posts/Javascript/es6.md","hash":"39546a409be3721f320f155d2e1c7af7f1a281d8","modified":1656660979510},{"_id":"source/_posts/javascript/functional programming/closure.md","hash":"4df8ef49f7bb35f7502edf4d24544cc10bb14548","modified":1656665211810},{"_id":"source/_posts/javascript/functional programming/pure functions.md","hash":"1ed916e3664e2de300da3da24780631e56c416af","modified":1656665299323},{"_id":"source/_posts/Javascript/functional programming/closure.md","hash":"4df8ef49f7bb35f7502edf4d24544cc10bb14548","modified":1656665211810},{"_id":"source/_posts/Javascript/functional programming/higher-order function.md","hash":"8091bb156b95fe9996ca9b6b6b58be4e9dbc8b30","modified":1656665204082},{"_id":"source/_posts/Javascript/functional programming/pure functions.md","hash":"1ed916e3664e2de300da3da24780631e56c416af","modified":1656665299323},{"_id":"source/_posts/Javascript/FunctionalProgramming/closure.md","hash":"05a137e274fe6b4fc2a425237dacd82e25b79183","modified":1656666128601},{"_id":"source/_posts/Javascript/FunctionalProgramming/higher-order function.md","hash":"8091bb156b95fe9996ca9b6b6b58be4e9dbc8b30","modified":1656665204082},{"_id":"source/_posts/Javascript/FunctionalProgramming/pure functions.md","hash":"1ed916e3664e2de300da3da24780631e56c416af","modified":1656665299323},{"_id":"source/_posts/Python/control-flow.md","hash":"639315272d47a974bfa2bed07e5dc9c704c16b87","modified":1656660419989},{"_id":"source/_posts/Python/data-type.md","hash":"89352f34ce8efd6b3b5a53ae546049fb30c5e01c","modified":1656660419989},{"_id":"source/_posts/Python/linear-algebra.md","hash":"f2bd7b12d0c181fbd85b18914dbe559ad549c9f1","modified":1656660419990},{"_id":"source/_posts/python/control-flow.md","hash":"639315272d47a974bfa2bed07e5dc9c704c16b87","modified":1656660419989},{"_id":"source/_posts/python/data-type.md","hash":"89352f34ce8efd6b3b5a53ae546049fb30c5e01c","modified":1656660419989},{"_id":"source/_posts/python/linear-algebra.md","hash":"f2bd7b12d0c181fbd85b18914dbe559ad549c9f1","modified":1656660419990},{"_id":"source/_posts/Javascript/FunctionalProgramming/compose.md","hash":"59dca6ad0d07af212a9c9fa599ed5c5e7f9d13d6","modified":1656665737597},{"_id":"source/_posts/Javascript/FunctionalProgramming/curry.md","hash":"6c34b4636b4737ca6384585836dcf7e992316d70","modified":1656665602423},{"_id":"source/_posts/Javascript/FunctionalProgramming/lodash.md","hash":"ffde511045912451162b115b82364c40f4ada8bf","modified":1656665626259}],"Category":[{"name":"ES6","_id":"cl525vpe70002uy9ke43297tn"},{"name":"Python","_id":"cl525vpeb0006uy9kg3h34p5a"},{"name":"Functonal Programming","_id":"cl527ippr000cud9k363j44y5"}],"Data":[],"Page":[{"title":"categories","date":"2019-11-07T10:19:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-07 18:19:36\ntype: \"categories\"\n---\n","updated":"2022-07-01T07:26:59.991Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl525vqp0000kuy9k363yh60z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-11-07T10:18:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-07 18:18:50\ntype: \"tags\"\n---\n","updated":"2022-07-01T07:26:59.993Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl525vqp1000luy9kchzibqic","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"let和const命令","date":"2020-01-15T06:24:00.000Z","_content":"## Let命令\n### 基本用法\n``` javascript\n    var a = [];\n    for (var i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n    }\n    a[6](); // 10\n```\n变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。\n``` javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n```\n变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。\nJavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。\n```javascript\nfor (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n```\n### 不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n### 暂时性死区（temporal dead zone，简称 TDZ）\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n```javascript\nvar tmp = 123;\n\nif (true) {\n  //TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n在let命令声明变量tmp之前，都属于变量tmp的“死区”\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作，作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof x; // ReferenceError\nlet x;\ntypeof undeclared_variable // \"undefined\"\n```\n\n```javascript\n//隐蔽死区,问题在哪里？？\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n```javascript\n// 不报错\nvar x = x;\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n```\n**暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量**\n\n### 不允许重复声明\n```javascript\n// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n\n----- split -----\n\nfunction func(arg) {\n  let arg;\n}\nfunc() // 报错\n\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc() // 不报错\n```\n## 块级作用域\n### 为什么需要块级作用域？\n1. 内层变量可能会覆盖外层变量\n2. 用来计数的循环变量泄露为全局变量\n### ES6的块级作用域\n```javascript\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n----- split -----\n\n//ES6 允许块级作用域的任意嵌套\n{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n\n----- split -----\n\n//内层作用域可以定义外层作用域的同名变量\n{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n\n----- split -----\n\n//匿名立即执行函数表达式（匿名 IIFE）不再必要了\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n### 块级作用域与函数声明\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此下面两种情况实际都能运行，不会报错。\n```javascript\n// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n```\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数。\nES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。\n```javascript\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n//I am inside!\n\n----- 在ES5环境中等价于 -----\n\n// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n//ES5环境得到：I am inside!\n\n----- 在ES6环境中等价于 -----\n\n// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// ES6环境下报错：Uncaught TypeError: f is not a function\n\n----- ES5、ES6建议写法 -----\n//考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。\n// 块级作用域内部的函数声明语句，建议不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 块级作用域内部，优先使用函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n以下三条规则只对 ES6 的浏览器实现有效：\n1. 允许在块级作用域内声明函数。\n2. 函数声明类似于var，即会提升到全局作用域或函数作用域的头部。\n3. 同时，函数声明还会提升到所在的块级作用域的头部。\n\n#### 注意点\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n```javascript\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n```\n## const命令\n1. const声明一个只读的常量。一旦声明，常量的值就不能改变，改变常量的值会报错。\n2. const一旦声明变量，就必须立即初始化，不能留到以后赋值，只声明不赋值，就会报错。\n3. 只在声明所在的块级作用域内有效。\n4. const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n5. const声明的常量，也与let一样不可重复声明。\n6. **本质：const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。**\n```javascript\n//exg.1 常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性\nconst foo = {};\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//exg.2 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错\nconst a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave'];    // 报错\n\n//exg.3 对象冻结Object.freeze\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n//exg.4 对象属性冻结\n//将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数\nvar constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n```\n## ES6声明变量6种方法\n1. var\n2. function\n3. let\n4. const\n5. import\n6. class\n\n## 顶层对象属性\n### 顶层对象\n在浏览器环境指的是window对象，\n在 Node 指的是global对象。\nES5 之中，顶层对象的属性与全局变量是等价的，顶层对象的属性赋值与全局变量的赋值，是同一件事。\n```javascript\nwindow.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n```\n**顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。**\n### ES5的问题\n1. 没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）。\n2. 程序员很容易不知不觉地就创建了全局变量（比如打字出错）。\n3. 顶层对象的属性是到处可以读写的，这非常不利于模块化编程。\n4. window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。\n\n### ES6的改变\n1. 为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性。\n2. let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。\n```javascript\n//全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined\nvar a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n## globalThis 对象\n1. JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。\n- 浏览器里面，顶层对象是window。\n- 浏览器和 Web Worker 里面，self也指向顶层对象。\n- Node 里面，顶层对象是global，但其他环境都不支持。\n\n2. 同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n- 全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。\n- 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n- 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。\n\n3. 取到顶层对象的方法：\n```javascript\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n```\n\n4. [ES2020](https://github.com/tc39/proposal-global) 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。\n垫片库[global-this](https://github.com/ungap/global-this)模拟了这个提案，可以在所有环境拿到globalThis。","source":"_posts/Javascript/es6.md","raw":"---\ntitle: let和const命令\ndate: 2020-01-15 14:24:00\ntag: 'ES6'\ncategory: 'ES6'\n---\n## Let命令\n### 基本用法\n``` javascript\n    var a = [];\n    for (var i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n    }\n    a[6](); // 10\n```\n变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。\n``` javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n```\n变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。\nJavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。\n```javascript\nfor (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n```\n### 不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n### 暂时性死区（temporal dead zone，简称 TDZ）\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n```javascript\nvar tmp = 123;\n\nif (true) {\n  //TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\n在let命令声明变量tmp之前，都属于变量tmp的“死区”\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作，作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n```javascript\ntypeof x; // ReferenceError\nlet x;\ntypeof undeclared_variable // \"undefined\"\n```\n\n```javascript\n//隐蔽死区,问题在哪里？？\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n```\n```javascript\n// 不报错\nvar x = x;\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n```\n**暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量**\n\n### 不允许重复声明\n```javascript\n// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n\n----- split -----\n\nfunction func(arg) {\n  let arg;\n}\nfunc() // 报错\n\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc() // 不报错\n```\n## 块级作用域\n### 为什么需要块级作用域？\n1. 内层变量可能会覆盖外层变量\n2. 用来计数的循环变量泄露为全局变量\n### ES6的块级作用域\n```javascript\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n----- split -----\n\n//ES6 允许块级作用域的任意嵌套\n{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n\n----- split -----\n\n//内层作用域可以定义外层作用域的同名变量\n{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n\n----- split -----\n\n//匿名立即执行函数表达式（匿名 IIFE）不再必要了\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n### 块级作用域与函数声明\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此下面两种情况实际都能运行，不会报错。\n```javascript\n// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n```\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数。\nES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。\n```javascript\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n//I am inside!\n\n----- 在ES5环境中等价于 -----\n\n// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n//ES5环境得到：I am inside!\n\n----- 在ES6环境中等价于 -----\n\n// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// ES6环境下报错：Uncaught TypeError: f is not a function\n\n----- ES5、ES6建议写法 -----\n//考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。\n// 块级作用域内部的函数声明语句，建议不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 块级作用域内部，优先使用函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n以下三条规则只对 ES6 的浏览器实现有效：\n1. 允许在块级作用域内声明函数。\n2. 函数声明类似于var，即会提升到全局作用域或函数作用域的头部。\n3. 同时，函数声明还会提升到所在的块级作用域的头部。\n\n#### 注意点\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n```javascript\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n```\n## const命令\n1. const声明一个只读的常量。一旦声明，常量的值就不能改变，改变常量的值会报错。\n2. const一旦声明变量，就必须立即初始化，不能留到以后赋值，只声明不赋值，就会报错。\n3. 只在声明所在的块级作用域内有效。\n4. const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n5. const声明的常量，也与let一样不可重复声明。\n6. **本质：const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。**\n```javascript\n//exg.1 常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性\nconst foo = {};\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//exg.2 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错\nconst a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave'];    // 报错\n\n//exg.3 对象冻结Object.freeze\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n//exg.4 对象属性冻结\n//将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数\nvar constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n```\n## ES6声明变量6种方法\n1. var\n2. function\n3. let\n4. const\n5. import\n6. class\n\n## 顶层对象属性\n### 顶层对象\n在浏览器环境指的是window对象，\n在 Node 指的是global对象。\nES5 之中，顶层对象的属性与全局变量是等价的，顶层对象的属性赋值与全局变量的赋值，是同一件事。\n```javascript\nwindow.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n```\n**顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。**\n### ES5的问题\n1. 没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）。\n2. 程序员很容易不知不觉地就创建了全局变量（比如打字出错）。\n3. 顶层对象的属性是到处可以读写的，这非常不利于模块化编程。\n4. window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。\n\n### ES6的改变\n1. 为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性。\n2. let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。\n```javascript\n//全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined\nvar a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n## globalThis 对象\n1. JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。\n- 浏览器里面，顶层对象是window。\n- 浏览器和 Web Worker 里面，self也指向顶层对象。\n- Node 里面，顶层对象是global，但其他环境都不支持。\n\n2. 同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n- 全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。\n- 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n- 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。\n\n3. 取到顶层对象的方法：\n```javascript\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n```\n\n4. [ES2020](https://github.com/tc39/proposal-global) 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。\n垫片库[global-this](https://github.com/ungap/global-this)模拟了这个提案，可以在所有环境拿到globalThis。","slug":"Javascript/es6","published":1,"updated":"2022-07-01T07:36:19.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527rf2b001gud9k5n07hxrk","content":"<h2 id=\"Let命令\"><a href=\"#Let命令\" class=\"headerlink\" title=\"Let命令\"></a>Let命令</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。<br>JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区（temporal-dead-zone，简称-TDZ）\"><a href=\"#暂时性死区（temporal-dead-zone，简称-TDZ）\" class=\"headerlink\" title=\"暂时性死区（temporal dead zone，简称 TDZ）\"></a>暂时性死区（temporal dead zone，简称 TDZ）</h3><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在let命令声明变量tmp之前，都属于变量tmp的“死区”<br>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作，作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//隐蔽死区,问题在哪里？？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = x;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = x;</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>\n<p><strong>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong></p>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func() <span class=\"comment\">// 不报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><h3 id=\"为什么需要块级作用域？\"><a href=\"#为什么需要块级作用域？\" class=\"headerlink\" title=\"为什么需要块级作用域？\"></a>为什么需要块级作用域？</h3><ol>\n<li>内层变量可能会覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量<h3 id=\"ES6的块级作用域\"><a href=\"#ES6的块级作用域\" class=\"headerlink\" title=\"ES6的块级作用域\"></a>ES6的块级作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 允许块级作用域的任意嵌套</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;</span><br><span class=\"line\">  &#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(insane); <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内层作用域可以定义外层作用域的同名变量</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">  &#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;</span><br><span class=\"line\">&#125;&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名立即执行函数表达式（匿名 IIFE）不再必要了</span></span><br><span class=\"line\"><span class=\"comment\">// IIFE 写法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"块级作用域与函数声明\"><a href=\"#块级作用域与函数声明\" class=\"headerlink\" title=\"块级作用域与函数声明\"></a>块级作用域与函数声明</h3>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。<br>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此下面两种情况实际都能运行，不会报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 情况一</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况二</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数。<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重复声明一次函数f</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">//I am inside!</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- 在ES5环境中等价于 -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5 环境</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">//ES5环境得到：I am inside!</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- 在ES6环境中等价于 -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器的 ES6 环境</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">// ES6环境下报错：Uncaught TypeError: f is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- ES5、ES6建议写法 -----</span><br><span class=\"line\"><span class=\"comment\">//考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</span></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域内部的函数声明语句，建议不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域内部，优先使用函数表达式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以下三条规则只对 ES6 的浏览器实现有效：</li>\n<li>允许在块级作用域内声明函数。</li>\n<li>函数声明类似于var，即会提升到全局作用域或函数作用域的头部。</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>\n</ol>\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><p>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不报错</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><ol>\n<li>const声明一个只读的常量。一旦声明，常量的值就不能改变，改变常量的值会报错。</li>\n<li>const一旦声明变量，就必须立即初始化，不能留到以后赋值，只声明不赋值，就会报错。</li>\n<li>只在声明所在的块级作用域内有效。</li>\n<li>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</li>\n<li>const声明的常量，也与let一样不可重复声明。</li>\n<li><strong>本质：const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//exg.1 常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\">foo.prop <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></span><br><span class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.2 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">'Hello'</span>); <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">'Dave'</span>];    <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.3 对象冻结Object.freeze</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.4 对象属性冻结</span></span><br><span class=\"line\"><span class=\"comment\">//将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</span><br><span class=\"line\">      constantize( obj[key] );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6声明变量6种方法\"><a href=\"#ES6声明变量6种方法\" class=\"headerlink\" title=\"ES6声明变量6种方法\"></a>ES6声明变量6种方法</h2></li>\n<li>var</li>\n<li>function</li>\n<li>let</li>\n<li>const</li>\n<li>import</li>\n<li>class</li>\n</ol>\n<h2 id=\"顶层对象属性\"><a href=\"#顶层对象属性\" class=\"headerlink\" title=\"顶层对象属性\"></a>顶层对象属性</h2><h3 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h3><p>在浏览器环境指的是window对象，<br>在 Node 指的是global对象。<br>ES5 之中，顶层对象的属性与全局变量是等价的，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。</strong></p>\n<h3 id=\"ES5的问题\"><a href=\"#ES5的问题\" class=\"headerlink\" title=\"ES5的问题\"></a>ES5的问题</h3><ol>\n<li>没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）。</li>\n<li>程序员很容易不知不觉地就创建了全局变量（比如打字出错）。</li>\n<li>顶层对象的属性是到处可以读写的，这非常不利于模块化编程。</li>\n<li>window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</li>\n</ol>\n<h3 id=\"ES6的改变\"><a href=\"#ES6的改变\" class=\"headerlink\" title=\"ES6的改变\"></a>ES6的改变</h3><ol>\n<li>为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性。</li>\n<li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成 this.a</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"globalThis-对象\"><a href=\"#globalThis-对象\" class=\"headerlink\" title=\"globalThis 对象\"></a>globalThis 对象</h2><ol>\n<li>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</li>\n</ol>\n<ul>\n<li>浏览器里面，顶层对象是window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ul>\n<ol start=\"2\">\n<li>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</li>\n</ol>\n<ul>\n<li>全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。</li>\n<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li>\n<li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。</li>\n</ul>\n<ol start=\"3\">\n<li><p>取到顶层对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">   ? <span class=\"built_in\">window</span></span><br><span class=\"line\">   : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">     ? global</span><br><span class=\"line\">     : <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/tc39/proposal-global\" target=\"_blank\" rel=\"noopener\">ES2020</a> 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。<br>垫片库<a href=\"https://github.com/ungap/global-this\" target=\"_blank\" rel=\"noopener\">global-this</a>模拟了这个提案，可以在所有环境拿到globalThis。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Let命令\"><a href=\"#Let命令\" class=\"headerlink\" title=\"Let命令\"></a>Let命令</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。<br>JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"comment\">// abc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let 的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区（temporal-dead-zone，简称-TDZ）\"><a href=\"#暂时性死区（temporal-dead-zone，简称-TDZ）\" class=\"headerlink\" title=\"暂时性死区（temporal dead zone，简称 TDZ）\"></a>暂时性死区（temporal dead zone，简称 TDZ）</h3><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在let命令声明变量tmp之前，都属于变量tmp的“死区”<br>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作，作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//隐蔽死区,问题在哪里？？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = <span class=\"number\">2</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = x;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = x;</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>\n<p><strong>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong></p>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func() <span class=\"comment\">// 不报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><h3 id=\"为什么需要块级作用域？\"><a href=\"#为什么需要块级作用域？\" class=\"headerlink\" title=\"为什么需要块级作用域？\"></a>为什么需要块级作用域？</h3><ol>\n<li>内层变量可能会覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量<h3 id=\"ES6的块级作用域\"><a href=\"#ES6的块级作用域\" class=\"headerlink\" title=\"ES6的块级作用域\"></a>ES6的块级作用域</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 允许块级作用域的任意嵌套</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;</span><br><span class=\"line\">  &#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(insane); <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内层作用域可以定义外层作用域的同名变量</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">  &#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;</span><br><span class=\"line\">&#125;&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">----- split -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名立即执行函数表达式（匿名 IIFE）不再必要了</span></span><br><span class=\"line\"><span class=\"comment\">// IIFE 写法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"块级作用域与函数声明\"><a href=\"#块级作用域与函数声明\" class=\"headerlink\" title=\"块级作用域与函数声明\"></a>块级作用域与函数声明</h3>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。<br>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此下面两种情况实际都能运行，不会报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 情况一</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 情况二</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数。<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重复声明一次函数f</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">//I am inside!</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- 在ES5环境中等价于 -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5 环境</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">//ES5环境得到：I am inside!</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- 在ES6环境中等价于 -----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器的 ES6 环境</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am outside!'</span>); &#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am inside!'</span>); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  f();</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">// ES6环境下报错：Uncaught TypeError: f is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">----- ES5、ES6建议写法 -----</span><br><span class=\"line\"><span class=\"comment\">//考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</span></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域内部的函数声明语句，建议不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域内部，优先使用函数表达式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以下三条规则只对 ES6 的浏览器实现有效：</li>\n<li>允许在块级作用域内声明函数。</li>\n<li>函数声明类似于var，即会提升到全局作用域或函数作用域的头部。</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部。</li>\n</ol>\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><p>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不报错</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><ol>\n<li>const声明一个只读的常量。一旦声明，常量的值就不能改变，改变常量的值会报错。</li>\n<li>const一旦声明变量，就必须立即初始化，不能留到以后赋值，只声明不赋值，就会报错。</li>\n<li>只在声明所在的块级作用域内有效。</li>\n<li>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</li>\n<li>const声明的常量，也与let一样不可重复声明。</li>\n<li><strong>本质：const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//exg.1 常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\">foo.prop <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></span><br><span class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.2 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">'Hello'</span>); <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">'Dave'</span>];    <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.3 对象冻结Object.freeze</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//exg.4 对象属性冻结</span></span><br><span class=\"line\"><span class=\"comment\">//将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</span><br><span class=\"line\">      constantize( obj[key] );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6声明变量6种方法\"><a href=\"#ES6声明变量6种方法\" class=\"headerlink\" title=\"ES6声明变量6种方法\"></a>ES6声明变量6种方法</h2></li>\n<li>var</li>\n<li>function</li>\n<li>let</li>\n<li>const</li>\n<li>import</li>\n<li>class</li>\n</ol>\n<h2 id=\"顶层对象属性\"><a href=\"#顶层对象属性\" class=\"headerlink\" title=\"顶层对象属性\"></a>顶层对象属性</h2><h3 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h3><p>在浏览器环境指的是window对象，<br>在 Node 指的是global对象。<br>ES5 之中，顶层对象的属性与全局变量是等价的，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。</strong></p>\n<h3 id=\"ES5的问题\"><a href=\"#ES5的问题\" class=\"headerlink\" title=\"ES5的问题\"></a>ES5的问题</h3><ol>\n<li>没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）。</li>\n<li>程序员很容易不知不觉地就创建了全局变量（比如打字出错）。</li>\n<li>顶层对象的属性是到处可以读写的，这非常不利于模块化编程。</li>\n<li>window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</li>\n</ol>\n<h3 id=\"ES6的改变\"><a href=\"#ES6的改变\" class=\"headerlink\" title=\"ES6的改变\"></a>ES6的改变</h3><ol>\n<li>为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性。</li>\n<li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成 this.a</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"globalThis-对象\"><a href=\"#globalThis-对象\" class=\"headerlink\" title=\"globalThis 对象\"></a>globalThis 对象</h2><ol>\n<li>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</li>\n</ol>\n<ul>\n<li>浏览器里面，顶层对象是window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ul>\n<ol start=\"2\">\n<li>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</li>\n</ol>\n<ul>\n<li>全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。</li>\n<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li>\n<li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。</li>\n</ul>\n<ol start=\"3\">\n<li><p>取到顶层对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">   ? <span class=\"built_in\">window</span></span><br><span class=\"line\">   : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">     ? global</span><br><span class=\"line\">     : <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/tc39/proposal-global\" target=\"_blank\" rel=\"noopener\">ES2020</a> 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。<br>垫片库<a href=\"https://github.com/ungap/global-this\" target=\"_blank\" rel=\"noopener\">global-this</a>模拟了这个提案，可以在所有环境拿到globalThis。</p>\n</li>\n</ol>\n"},{"title":"闭包（ Closure ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\nwhatever\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/closure.md","raw":"---\ntitle: 闭包（ Closure ）\n# date: 2018-07-16 09:39:40\ntag: [Closure]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\nwhatever\n\n\n\n","slug":"Javascript/FunctionalProgramming/closure","published":1,"date":"2022-07-01T08:45:18.344Z","updated":"2022-07-01T09:02:08.601Z","_id":"cl527s774001sud9kddh6f3ab","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong><br>whatever</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong><br>whatever</p>\n</blockquote>\n"},{"title":"高阶函数（ Higher-order function ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n## 定义\n\n<!-- ### 定义 -->\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/higher-order function.md","raw":"---\ntitle: 高阶函数（ Higher-order function ）\n# date: 2018-07-16 09:39:40\ntag: [Higher-order function]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n## 定义\n\n<!-- ### 定义 -->\n\n\n\n","slug":"Javascript/FunctionalProgramming/higher-order function","published":1,"date":"2022-07-01T08:36:58.377Z","updated":"2022-07-01T08:46:44.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527s775001tud9k4cny3v8m","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><!-- ### 定义 -->\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><!-- ### 定义 -->\n\n\n\n"},{"title":"纯函数（ Pure functions ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/pure functions.md","raw":"---\ntitle: 纯函数（ Pure functions ）\n# date: 2018-07-16 09:39:40\ntag: [Pure functions]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","slug":"Javascript/FunctionalProgramming/pure functions","published":1,"date":"2022-07-01T08:47:14.993Z","updated":"2022-07-01T08:48:19.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527s777001vud9kb3vf5h2z","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n"},{"title":"控制流","date":"2019-11-08T06:59:02.000Z","_content":"## 条件语句\n### if语句\nif语句是是一种条件语句，根据条件为 true 还是 false 运行或执行相关代码。\n``` python\nif phone_balance < 5:\n    phone_balance += 10\n    bank_balance -= 10\n```\nif 语句以关键字 if 开始，然后是要检查的条件，在此例中是 phone_balance < 5，接着是英文冒号。\n条件用布尔表达式指定，结果为 True 或 False。\n这行之后是一个条件为 true 时将执行的缩进代码块。在此例中，仅在 phone_balance 小于 5 时才执行使 phone_balance 递增和使 bank_balance 递减的行。如果不小于 5，这个 if 块中的代码将被跳过。","source":"_posts/Python/control-flow.md","raw":"---\ntitle: 控制流\ndate: 2019-11-08 14:59:02\ntag: 'Python'\ncategory: 'Python'\n---\n## 条件语句\n### if语句\nif语句是是一种条件语句，根据条件为 true 还是 false 运行或执行相关代码。\n``` python\nif phone_balance < 5:\n    phone_balance += 10\n    bank_balance -= 10\n```\nif 语句以关键字 if 开始，然后是要检查的条件，在此例中是 phone_balance < 5，接着是英文冒号。\n条件用布尔表达式指定，结果为 True 或 False。\n这行之后是一个条件为 true 时将执行的缩进代码块。在此例中，仅在 phone_balance 小于 5 时才执行使 phone_balance 递增和使 bank_balance 递减的行。如果不小于 5，这个 if 块中的代码将被跳过。","slug":"Python/control-flow","published":1,"updated":"2022-07-01T07:26:59.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527shh80021ud9kdnfybwv8","content":"<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><p>if语句是是一种条件语句，根据条件为 true 还是 false 运行或执行相关代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> phone_balance &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    phone_balance += <span class=\"number\">10</span></span><br><span class=\"line\">    bank_balance -= <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>if 语句以关键字 if 开始，然后是要检查的条件，在此例中是 phone_balance &lt; 5，接着是英文冒号。<br>条件用布尔表达式指定，结果为 True 或 False。<br>这行之后是一个条件为 true 时将执行的缩进代码块。在此例中，仅在 phone_balance 小于 5 时才执行使 phone_balance 递增和使 bank_balance 递减的行。如果不小于 5，这个 if 块中的代码将被跳过。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><p>if语句是是一种条件语句，根据条件为 true 还是 false 运行或执行相关代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> phone_balance &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    phone_balance += <span class=\"number\">10</span></span><br><span class=\"line\">    bank_balance -= <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>if 语句以关键字 if 开始，然后是要检查的条件，在此例中是 phone_balance &lt; 5，接着是英文冒号。<br>条件用布尔表达式指定，结果为 True 或 False。<br>这行之后是一个条件为 true 时将执行的缩进代码块。在此例中，仅在 phone_balance 小于 5 时才执行使 phone_balance 递增和使 bank_balance 递减的行。如果不小于 5，这个 if 块中的代码将被跳过。</p>\n"},{"title":"数据类型和运算符","date":"2019-11-06T09:05:43.000Z","_content":"\n<!-- ## 数据类型和运算符 -->\n## 算术运算符\n`+ 加`\n`- 减`\n`* 乘`\n`/ 除`\n`% 取模（相除后的余数）`\n`** 取幂`\n`// 相除后向下取整到最接近的整数`\n***\n## 变量\n``` python\nx = 3\ny = 4   等价于   x, y, z = 3, 4, 5\nz = 5\n```\n变量命名规则：\n1. 变量名称应该要能够描述所存储的值。\n\n2. 只能在变量名称中使用常规字母、数字和下划线。不能包含空格，并且需要以字母或下划线开头。\n\n3. 不能使用保留字或内置标识符。\n\n4. 变量名称的命名方式是全部使用小写字母，并用下划线区分单词。 例：my_variable = 1\n\n![](/img/keywordsinpy.png)\n***\n## 赋值运算符\n`+=   如：x+=2 equal x=x+2`\n`-=   如：x-=2 equal x=x-2`\n`*=   如：x*=2 equal x=x*2`\n***\n## 整数和浮点数\n数字值可以用到两种 python 数据类型：\nint - 表示整数值\nfloat - 表示小数或浮点数值\n``` python\nx = int(4.7)   # x is now an integer 4\ny = float(4)   # y is now a float of 4.0\n>>> print(type(x))\nint\n>>> print(type(y))\nfloat\n```\n有个有趣的现象，如下：\n``` python\n>>> print(.1 + .1 + .1 == .3)\nFalse\n```\nQ: 为什么结果是false呢？？？\nA: 详戳[文档](https://docs.python.org/3/tutorial/floatingpoint.html)\n\nQ: 如果在 Python 中除以零，会发生什么？\nA: 如下报错\n```python\nTraceback (most recent call last):\nFile \"/tmp/vmuser_tnryxwdmhw/quiz.py\", line 1, in \nprint(5/0)\nZeroDivisionError: division by zero\n```\n***\n## Python两种报错类型\n1. 异常 代码运行时发生的问题\n2. 语法错误  Python 在运行代码之前检查代码时发现的问题\n详戳[文档](https://docs.python.org/3/tutorial/errors.html)\n***\n## 布尔运算符、比较运算符、逻辑运算符\n1. 布尔运算符：True 或 False，分别表示为 1 或 0\n通常有 6 个比较运算符会获得布尔值：<、>、<=、>=、==、!=\n2. 比较运算符：\n|符号举例|布尔型|运算符|\n|---|---|---|\n|5 < 3|False|小于|\n|5 > 3|True|大于|\n|3 <= 3\t|True|小于或等于|\n|3 >= 5|False|大于或等于|\n|3 == 5|False|等于|\n|3 != 5|True|不等于|\n3. 逻辑运算符：and、or、not\n|逻辑使用情况|布尔型|运算符|\n|---|---|---|\n|5 < 3 and 5 == 5|False|and - 检查提供的所有语句是否都为 True|\n|5 < 3 or 5 == 5|True|or - 检查是否至少有一个语句为 True|\n|not 5 < 3|True|not - 翻转布尔值|\n***\n## 字符串\n在 python 中，字符串的变量类型显示为 str。你可以使用双引号 \" 或单引号 ' 定义字符串。\n``` python\n>>> my_string1 = 'Hello string1!'\n>>> my_string2 = \"Hello string2!\"\n>>> my_string3 = 'This is YC\\'s website.' #在字符串中使用 \\ 当做转义字符\n```\n\n\n### 字符串操作与方法\n1. 字符串拼接\n``` python\n>>> first_word = 'Hello'\n>>> second_word = 'World'\n>>> print(first_word + second_word)\nHelloWorld\n\n>>> print(first_word + ' ' + second_word)\nHello World\n\n>>> print(first_word * 5)\nHelloHelloHelloHelloHello\n```\n2. 字符串长度\n``` python\n>>> print(len(first_word))\n5\n```\nQ：如果len函数的参数是整数835，函数 len 会返回什么？\nA：error\n\n3. 字符串索引\n``` python\n>>> first_word[0]\nH\n>>> second_word[1]\no\n```\n4. 等等\n![](/img/str1.png)\n``` python\n>>> my_string.islower() #字符串是否小写\nTrue\n\n>>> my_string.count('a') #字母a的个数\n2\n\n>>> my_string.find('a') #字母a的位置，如果有多个字母a，则返回第一个的位置\n3\n```\n可见，count 和 find 方法都接受另一个参数。islower 方法不接受参数。\n\n5. 更多内容戳[字符串方法文档](https://docs.python.org/3/library/stdtypes.html#string-methods)\n***\n## 类型和类型转换\n四种数据类型：整型、浮点型、布尔型、字符串\n``` python\n>>> print(type(5))\nint\n\n>>> print(type(4.8))\nfloat\n\n>>> print(type('what'))\nstr\n\n>>> print(type(True))\nbool\n\n>>> print(\"0\" + \"5\")\n'05'\n\n>>> print(0 + 5)\n5\n\n>>> print(0 + \"5\")\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n>>> print(\"0\" + 5)\nTypeError: can only concatenate str (not \"int\") to str\n```\n***\n## 列表\n### 创建列表\n使用[]创建列表\n``` python\n>>> list = [1, 2.5, '3', true]\n\n```\n### 列表索引\n``` python\n>>> list[0] #获取第一个元素\n1\n\n>>> list[1] #获取第3个元素\n2.5\n\n>>> list(len(list) - 1) #获取最后一个元素\ntrue\n\n>>> list(-1) #获取最后一个元素\ntrue\n\n>>> list(-2) #获取倒数第二个元素\n'3'\n```\n### 列表切片\n1. 使用切片功能从列表中提取多个值。在使用切片功能时，务必注意，**起始索引包含在内，终止索引排除在外**。\n``` python\n>>> list[1:2]\n2.5\n```\n2. 要从列表的开头开始，也可以省略起始值\n``` python\n>>> list[:2]\n[1,2.5]\n```\n3. 返回到列表结尾的所有值，可以忽略最后一个元素。\n``` python\n>>> list[1:]\n[2.5, '3', true]\n```\n4. **in** OR **not in**\n``` python\n>>> 'hello' in 'hello world'\nTrue\n\n>>> 'wor' in 'hello world'\nTrue\n\n>>> 'low' in 'hello world'\nFalse\n\n>>> 6 not in [1, 2, 3, 4, 5]\nTrue\n\n>>> 6 in [1, 2, 3, 4, 5]\nFalse\n```\n\n### 可变性和顺序\n1. 可变性：对象创建完毕后，是否可以更改该对象。\n如果对象（例如列表）可以更改，则是可变的。如果无法更改对象以创建全新的对象（例如字符串），则该对象是不可变的。\n列表可变：\n``` python\n>>> list = [1, 2, 3, 4, 5]\n>>> list[0] = 'one'\n>>> print(list)\n\n['one', 2, 3, 4, 5]\n```\n字符串不可变：\n``` python\n>>> my_string = \"Hello YC\"\n>>> my_string[0] = 'M'\n>>> print(my_string)\n\n\"Hello YC\"\n```\n2. 字符串和列表都是有序的。有些数据类型是无序的。\n3. **对于你要使用的每种数据类型，注意两个事项：**\n    **可变吗？**\n    **有序吗？**\n\n### 列表函数\n1. len() 返回列表中的元素数量\n2. max() 返回列表中的最大元素。\n    最大元素的判断依据是列表中的对象类型。\n    数字列表中的最大元素是最大的数字。\n    字符串列表中的最大元素是按照字母顺序排序时排在最后一位的元素。\n    因为 max() 函数的定义依据是大于比较运算符。如果列表包含不同的无法比较类型的元素，则 max() 的结果是 undefined。\n3. min() 返回列表中的最小元素。它是 max() 函数的对立面，返回列表中的最小元素。\n4. sorted() 返回一个从最小到最大排序的列表**副本**，**并使原始列表保持不变**。\n5. join 是一个字符串方法，将字符串列表作为参数，并返回一个由列表元素组成并由分隔符字符串分隔的字符串。\n``` python\n>>> my_str = \"\\n\".join([\"abc\", \"def\", \"ghi\", \"jkl\"])\n>>> print(my_str)\n\"abc\"\n\"def\"\n\"ghi\"\n\"jkl\"\n\n>>> my_class = \"-\".join([\"Class\", \"D\"])\n>>> print(my_class)\n\"Class-D\"\n```\n6. append方法将元素添加到列表末尾\n``` python\n>>> my_num = [1, 2, 3, 4]\n>>> my_num.append(5)\n>>> print(my_num)\n\n[1,2,3,4,5]\n```\n***\n## 元祖\n不可变有序元素数据类型。通常用来存储相关的信息。\n``` python\n>>> my_figure = (165, 50)\n>>> print(\"Height:\", my_figure[0])\n>>> print(\"Weight:\", my_figure[1])\n```\n与列表相同的是，它们都存储一个有序的对象集合，并且可以通过索引访问这些对象。\n与列表不同的是，元组不可变，你无法向元组中添加项目或从中删除项目，或者直接对元组排序。\n\n元组还可以用来以紧凑的方式为多个变量赋值。\n``` python\n>>> dimensions = 52, 40, 100 #可以忽略小括号，不影响解释代码\n>>> length, width, height = dimensions # 元组解包: 根据元组 dimensions 的内容为三个变量赋了值\n\n# 如果我们不需要直接使用 dimensions，可以将这两行代码简写为一行，一次性为三个变量赋值！\n>>> print(\"The dimensions are {} x {} x {}\".format(length, width, height)) \n\n\"The dimensions are 52 x 40 x 100\"\n```\n>注意：列表是可变有序的，元祖是不可变有序的\n***\n## 集合\n集合是一个包含唯一元素的可变无序集合数据类型。\n集合的一个用途是快速删除列表中的重复项。\n``` pyhton\n>>> my_numbers = [1, 2, 3, 4, 1, 2, 3]\n>>> unique_nums = set(my_numbers)\n>>> print(unique_nums)\n\n{1, 2, 3, 4}\n```\n集合和列表一样支持 in 运算符。\n和列表相似，你可以使用 add 方法将元素添加到集合中，并使用 pop 方法删除元素。\n但是，当你从集合中拿出元素时，会随机删除一个元素。注意和列表不同，集合是无序的，因此没有“最后一个元素”。\n你可以对集合执行的其他操作包括可以对数学集合执行的操作。可以对集合轻松地执行 union、intersection 和 difference 等方法，并且与其他容器相比，速度快了很多。\n\n``` python\n>>> fruit = {\"apple\", \"banana\", \"orange\", \"grapefruit\"}  # define a set\n\n>>> print(\"watermelon\" in fruit)  # check for element\n\n>>> fruit.add(\"watermelon\")  # add an element\n>>> print(fruit)\n\n>>> print(fruit.pop())  # remove a random element\n>>> print(fruit)\n\nFalse\n{'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}\ngrapefruit\n{'orange', 'watermelon', 'banana', 'apple'}\n```\n检测学习成果来了，下面这个有趣的问题，你认为5还会在b集合中吗?\n``` python\n>>> a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n>>> b = set(a)\n>>> b.add(5)\n>>> b.pop()\n```\n***\n## 字典和恒等运算符\n### 字典\n字典是可变数据类型，其中存储的是唯一键到值的映射。下面是存储元素和相应原子序数的字典。\n``` python\n>>> fruits = {\"apple\": 3, \"orange\": 2, \"lemon\": 6}\n```\n字典的键可以是任何**不可变类型**，例如整数或元组，而不仅仅是字符串。\n每个键都不一定要是相同的类型！使用方括号并在括号里放入键，查询字典中的值或向字典中插入新值。\n``` python\n>>> print(fruits[\"orange\"])  # print the value mapped to \"orange\"\n>>> fruits[\"peach\"] = 5  # insert \"peach\" with a value of 5 into the dictionary\n```\n检查某个值是否在列表或集合中一样，使用关键字 in 检查值是否在字典中。字典有一个也很有用的相关方法，叫做 get。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。\n``` python\n>>> print(\"lemon\" in fruits)\n>>> print(fruits.get(\"pineapple\"))\n>>> print(fruits[\"pineapple\"])\n\nTrue\nNone\nKeyError错误\n```\nlemon 位于该字典中，因此输出 pineapple 不在字典中，因此 get 返回 None，然后系统输出 None。\n>如果你预计查询有时候会失败，get 可能比普通的方括号查询更合适，因为错误可能会使程序崩溃。\n\nQ:以下哪些项可以用作字典的键？（多选） \n  A. str\n  B. list\n  C. int\n  D. float\n\n### 恒等运算符\n|关键字|运算符|\n|---|---|\n|is|检查两边是否恒等|\n|is not|检查两边是否不恒等|\n\n>你可以使用运算符 is 检查某个键是否返回了 None。或者使用 is not 检查是否没有返回 None。\n``` python\n>>> result = fruits.get(\"pineapple\")\n>>> print(result is None)\n>>> print(result is not None)\n\nTrue\nFalse\n```\n\nQ:检查是否相等或恒等\n``` python\n>>> a = [1, 2, 3]\n>>> b = a\n>>> c = [1, 2, 3]\n\n>>> print(a == b)\n>>> print(a is b)\n>>> print(a == c)\n>>> print(a is c)\n\nTrue\nTrue\nTrue\nFalse\n```\n***\n## 复合数据结构\n在容器中包含容器，就可以创建复合数据结构。例如，下面的字典将键映射到也是字典的值！\n``` python\n>>> data = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\n```\n访问这个嵌套字典中的元素:\n``` python\n>>> helium = data[\"helium\"]  # get the helium dictionary\n>>> hydrogen_weight = elements[\"hydrogen\"][\"weight\"]  # get hydrogen's weight\n```\n>总结：\n>列表:有序、可变、使用.append添加项目\n>集合：无序、可变、使用.add添加项目\n>字典：无序、可嵌套\n***\n## 总结\n1. 数据结构\n|Data Structure|Ordered|Mutable|Constructor|Example|\n|---|---|---|---|---|\n|int|NA|NA|int()|5|\n|float|NA|NA|float()|6.5|\n|string|Yes|No|' ' or \" \" or str()|\"this is a string\"|\n|bool|NA|NA|NA|True or False|\n|list|Yes|Yes|[ ] or list()|[5, 'yes', 5.7]|\n|tuple|Yes|No|( ) or tuple()|(5, 'yes', 5.7)|\n|set|No|Yes|{ } or set()|{5, 'yes', 5.7}|\n|dictionary|No|Keys: No|{ } or dict()|{'Jun':75, 'Jul':89}|\n","source":"_posts/Python/data-type.md","raw":"---\ntitle: 数据类型和运算符\ndate: 2019-11-06 17:05:43\ntags: Python\ncategory: \"Python\"\n---\n\n<!-- ## 数据类型和运算符 -->\n## 算术运算符\n`+ 加`\n`- 减`\n`* 乘`\n`/ 除`\n`% 取模（相除后的余数）`\n`** 取幂`\n`// 相除后向下取整到最接近的整数`\n***\n## 变量\n``` python\nx = 3\ny = 4   等价于   x, y, z = 3, 4, 5\nz = 5\n```\n变量命名规则：\n1. 变量名称应该要能够描述所存储的值。\n\n2. 只能在变量名称中使用常规字母、数字和下划线。不能包含空格，并且需要以字母或下划线开头。\n\n3. 不能使用保留字或内置标识符。\n\n4. 变量名称的命名方式是全部使用小写字母，并用下划线区分单词。 例：my_variable = 1\n\n![](/img/keywordsinpy.png)\n***\n## 赋值运算符\n`+=   如：x+=2 equal x=x+2`\n`-=   如：x-=2 equal x=x-2`\n`*=   如：x*=2 equal x=x*2`\n***\n## 整数和浮点数\n数字值可以用到两种 python 数据类型：\nint - 表示整数值\nfloat - 表示小数或浮点数值\n``` python\nx = int(4.7)   # x is now an integer 4\ny = float(4)   # y is now a float of 4.0\n>>> print(type(x))\nint\n>>> print(type(y))\nfloat\n```\n有个有趣的现象，如下：\n``` python\n>>> print(.1 + .1 + .1 == .3)\nFalse\n```\nQ: 为什么结果是false呢？？？\nA: 详戳[文档](https://docs.python.org/3/tutorial/floatingpoint.html)\n\nQ: 如果在 Python 中除以零，会发生什么？\nA: 如下报错\n```python\nTraceback (most recent call last):\nFile \"/tmp/vmuser_tnryxwdmhw/quiz.py\", line 1, in \nprint(5/0)\nZeroDivisionError: division by zero\n```\n***\n## Python两种报错类型\n1. 异常 代码运行时发生的问题\n2. 语法错误  Python 在运行代码之前检查代码时发现的问题\n详戳[文档](https://docs.python.org/3/tutorial/errors.html)\n***\n## 布尔运算符、比较运算符、逻辑运算符\n1. 布尔运算符：True 或 False，分别表示为 1 或 0\n通常有 6 个比较运算符会获得布尔值：<、>、<=、>=、==、!=\n2. 比较运算符：\n|符号举例|布尔型|运算符|\n|---|---|---|\n|5 < 3|False|小于|\n|5 > 3|True|大于|\n|3 <= 3\t|True|小于或等于|\n|3 >= 5|False|大于或等于|\n|3 == 5|False|等于|\n|3 != 5|True|不等于|\n3. 逻辑运算符：and、or、not\n|逻辑使用情况|布尔型|运算符|\n|---|---|---|\n|5 < 3 and 5 == 5|False|and - 检查提供的所有语句是否都为 True|\n|5 < 3 or 5 == 5|True|or - 检查是否至少有一个语句为 True|\n|not 5 < 3|True|not - 翻转布尔值|\n***\n## 字符串\n在 python 中，字符串的变量类型显示为 str。你可以使用双引号 \" 或单引号 ' 定义字符串。\n``` python\n>>> my_string1 = 'Hello string1!'\n>>> my_string2 = \"Hello string2!\"\n>>> my_string3 = 'This is YC\\'s website.' #在字符串中使用 \\ 当做转义字符\n```\n\n\n### 字符串操作与方法\n1. 字符串拼接\n``` python\n>>> first_word = 'Hello'\n>>> second_word = 'World'\n>>> print(first_word + second_word)\nHelloWorld\n\n>>> print(first_word + ' ' + second_word)\nHello World\n\n>>> print(first_word * 5)\nHelloHelloHelloHelloHello\n```\n2. 字符串长度\n``` python\n>>> print(len(first_word))\n5\n```\nQ：如果len函数的参数是整数835，函数 len 会返回什么？\nA：error\n\n3. 字符串索引\n``` python\n>>> first_word[0]\nH\n>>> second_word[1]\no\n```\n4. 等等\n![](/img/str1.png)\n``` python\n>>> my_string.islower() #字符串是否小写\nTrue\n\n>>> my_string.count('a') #字母a的个数\n2\n\n>>> my_string.find('a') #字母a的位置，如果有多个字母a，则返回第一个的位置\n3\n```\n可见，count 和 find 方法都接受另一个参数。islower 方法不接受参数。\n\n5. 更多内容戳[字符串方法文档](https://docs.python.org/3/library/stdtypes.html#string-methods)\n***\n## 类型和类型转换\n四种数据类型：整型、浮点型、布尔型、字符串\n``` python\n>>> print(type(5))\nint\n\n>>> print(type(4.8))\nfloat\n\n>>> print(type('what'))\nstr\n\n>>> print(type(True))\nbool\n\n>>> print(\"0\" + \"5\")\n'05'\n\n>>> print(0 + 5)\n5\n\n>>> print(0 + \"5\")\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n>>> print(\"0\" + 5)\nTypeError: can only concatenate str (not \"int\") to str\n```\n***\n## 列表\n### 创建列表\n使用[]创建列表\n``` python\n>>> list = [1, 2.5, '3', true]\n\n```\n### 列表索引\n``` python\n>>> list[0] #获取第一个元素\n1\n\n>>> list[1] #获取第3个元素\n2.5\n\n>>> list(len(list) - 1) #获取最后一个元素\ntrue\n\n>>> list(-1) #获取最后一个元素\ntrue\n\n>>> list(-2) #获取倒数第二个元素\n'3'\n```\n### 列表切片\n1. 使用切片功能从列表中提取多个值。在使用切片功能时，务必注意，**起始索引包含在内，终止索引排除在外**。\n``` python\n>>> list[1:2]\n2.5\n```\n2. 要从列表的开头开始，也可以省略起始值\n``` python\n>>> list[:2]\n[1,2.5]\n```\n3. 返回到列表结尾的所有值，可以忽略最后一个元素。\n``` python\n>>> list[1:]\n[2.5, '3', true]\n```\n4. **in** OR **not in**\n``` python\n>>> 'hello' in 'hello world'\nTrue\n\n>>> 'wor' in 'hello world'\nTrue\n\n>>> 'low' in 'hello world'\nFalse\n\n>>> 6 not in [1, 2, 3, 4, 5]\nTrue\n\n>>> 6 in [1, 2, 3, 4, 5]\nFalse\n```\n\n### 可变性和顺序\n1. 可变性：对象创建完毕后，是否可以更改该对象。\n如果对象（例如列表）可以更改，则是可变的。如果无法更改对象以创建全新的对象（例如字符串），则该对象是不可变的。\n列表可变：\n``` python\n>>> list = [1, 2, 3, 4, 5]\n>>> list[0] = 'one'\n>>> print(list)\n\n['one', 2, 3, 4, 5]\n```\n字符串不可变：\n``` python\n>>> my_string = \"Hello YC\"\n>>> my_string[0] = 'M'\n>>> print(my_string)\n\n\"Hello YC\"\n```\n2. 字符串和列表都是有序的。有些数据类型是无序的。\n3. **对于你要使用的每种数据类型，注意两个事项：**\n    **可变吗？**\n    **有序吗？**\n\n### 列表函数\n1. len() 返回列表中的元素数量\n2. max() 返回列表中的最大元素。\n    最大元素的判断依据是列表中的对象类型。\n    数字列表中的最大元素是最大的数字。\n    字符串列表中的最大元素是按照字母顺序排序时排在最后一位的元素。\n    因为 max() 函数的定义依据是大于比较运算符。如果列表包含不同的无法比较类型的元素，则 max() 的结果是 undefined。\n3. min() 返回列表中的最小元素。它是 max() 函数的对立面，返回列表中的最小元素。\n4. sorted() 返回一个从最小到最大排序的列表**副本**，**并使原始列表保持不变**。\n5. join 是一个字符串方法，将字符串列表作为参数，并返回一个由列表元素组成并由分隔符字符串分隔的字符串。\n``` python\n>>> my_str = \"\\n\".join([\"abc\", \"def\", \"ghi\", \"jkl\"])\n>>> print(my_str)\n\"abc\"\n\"def\"\n\"ghi\"\n\"jkl\"\n\n>>> my_class = \"-\".join([\"Class\", \"D\"])\n>>> print(my_class)\n\"Class-D\"\n```\n6. append方法将元素添加到列表末尾\n``` python\n>>> my_num = [1, 2, 3, 4]\n>>> my_num.append(5)\n>>> print(my_num)\n\n[1,2,3,4,5]\n```\n***\n## 元祖\n不可变有序元素数据类型。通常用来存储相关的信息。\n``` python\n>>> my_figure = (165, 50)\n>>> print(\"Height:\", my_figure[0])\n>>> print(\"Weight:\", my_figure[1])\n```\n与列表相同的是，它们都存储一个有序的对象集合，并且可以通过索引访问这些对象。\n与列表不同的是，元组不可变，你无法向元组中添加项目或从中删除项目，或者直接对元组排序。\n\n元组还可以用来以紧凑的方式为多个变量赋值。\n``` python\n>>> dimensions = 52, 40, 100 #可以忽略小括号，不影响解释代码\n>>> length, width, height = dimensions # 元组解包: 根据元组 dimensions 的内容为三个变量赋了值\n\n# 如果我们不需要直接使用 dimensions，可以将这两行代码简写为一行，一次性为三个变量赋值！\n>>> print(\"The dimensions are {} x {} x {}\".format(length, width, height)) \n\n\"The dimensions are 52 x 40 x 100\"\n```\n>注意：列表是可变有序的，元祖是不可变有序的\n***\n## 集合\n集合是一个包含唯一元素的可变无序集合数据类型。\n集合的一个用途是快速删除列表中的重复项。\n``` pyhton\n>>> my_numbers = [1, 2, 3, 4, 1, 2, 3]\n>>> unique_nums = set(my_numbers)\n>>> print(unique_nums)\n\n{1, 2, 3, 4}\n```\n集合和列表一样支持 in 运算符。\n和列表相似，你可以使用 add 方法将元素添加到集合中，并使用 pop 方法删除元素。\n但是，当你从集合中拿出元素时，会随机删除一个元素。注意和列表不同，集合是无序的，因此没有“最后一个元素”。\n你可以对集合执行的其他操作包括可以对数学集合执行的操作。可以对集合轻松地执行 union、intersection 和 difference 等方法，并且与其他容器相比，速度快了很多。\n\n``` python\n>>> fruit = {\"apple\", \"banana\", \"orange\", \"grapefruit\"}  # define a set\n\n>>> print(\"watermelon\" in fruit)  # check for element\n\n>>> fruit.add(\"watermelon\")  # add an element\n>>> print(fruit)\n\n>>> print(fruit.pop())  # remove a random element\n>>> print(fruit)\n\nFalse\n{'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}\ngrapefruit\n{'orange', 'watermelon', 'banana', 'apple'}\n```\n检测学习成果来了，下面这个有趣的问题，你认为5还会在b集合中吗?\n``` python\n>>> a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n>>> b = set(a)\n>>> b.add(5)\n>>> b.pop()\n```\n***\n## 字典和恒等运算符\n### 字典\n字典是可变数据类型，其中存储的是唯一键到值的映射。下面是存储元素和相应原子序数的字典。\n``` python\n>>> fruits = {\"apple\": 3, \"orange\": 2, \"lemon\": 6}\n```\n字典的键可以是任何**不可变类型**，例如整数或元组，而不仅仅是字符串。\n每个键都不一定要是相同的类型！使用方括号并在括号里放入键，查询字典中的值或向字典中插入新值。\n``` python\n>>> print(fruits[\"orange\"])  # print the value mapped to \"orange\"\n>>> fruits[\"peach\"] = 5  # insert \"peach\" with a value of 5 into the dictionary\n```\n检查某个值是否在列表或集合中一样，使用关键字 in 检查值是否在字典中。字典有一个也很有用的相关方法，叫做 get。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。\n``` python\n>>> print(\"lemon\" in fruits)\n>>> print(fruits.get(\"pineapple\"))\n>>> print(fruits[\"pineapple\"])\n\nTrue\nNone\nKeyError错误\n```\nlemon 位于该字典中，因此输出 pineapple 不在字典中，因此 get 返回 None，然后系统输出 None。\n>如果你预计查询有时候会失败，get 可能比普通的方括号查询更合适，因为错误可能会使程序崩溃。\n\nQ:以下哪些项可以用作字典的键？（多选） \n  A. str\n  B. list\n  C. int\n  D. float\n\n### 恒等运算符\n|关键字|运算符|\n|---|---|\n|is|检查两边是否恒等|\n|is not|检查两边是否不恒等|\n\n>你可以使用运算符 is 检查某个键是否返回了 None。或者使用 is not 检查是否没有返回 None。\n``` python\n>>> result = fruits.get(\"pineapple\")\n>>> print(result is None)\n>>> print(result is not None)\n\nTrue\nFalse\n```\n\nQ:检查是否相等或恒等\n``` python\n>>> a = [1, 2, 3]\n>>> b = a\n>>> c = [1, 2, 3]\n\n>>> print(a == b)\n>>> print(a is b)\n>>> print(a == c)\n>>> print(a is c)\n\nTrue\nTrue\nTrue\nFalse\n```\n***\n## 复合数据结构\n在容器中包含容器，就可以创建复合数据结构。例如，下面的字典将键映射到也是字典的值！\n``` python\n>>> data = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\n```\n访问这个嵌套字典中的元素:\n``` python\n>>> helium = data[\"helium\"]  # get the helium dictionary\n>>> hydrogen_weight = elements[\"hydrogen\"][\"weight\"]  # get hydrogen's weight\n```\n>总结：\n>列表:有序、可变、使用.append添加项目\n>集合：无序、可变、使用.add添加项目\n>字典：无序、可嵌套\n***\n## 总结\n1. 数据结构\n|Data Structure|Ordered|Mutable|Constructor|Example|\n|---|---|---|---|---|\n|int|NA|NA|int()|5|\n|float|NA|NA|float()|6.5|\n|string|Yes|No|' ' or \" \" or str()|\"this is a string\"|\n|bool|NA|NA|NA|True or False|\n|list|Yes|Yes|[ ] or list()|[5, 'yes', 5.7]|\n|tuple|Yes|No|( ) or tuple()|(5, 'yes', 5.7)|\n|set|No|Yes|{ } or set()|{5, 'yes', 5.7}|\n|dictionary|No|Keys: No|{ } or dict()|{'Jun':75, 'Jul':89}|\n","slug":"Python/data-type","published":1,"updated":"2022-07-01T07:26:59.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527shh90022ud9k04tf1i4a","content":"<!-- ## 数据类型和运算符 -->\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p><code>+ 加</code><br><code>- 减</code><br><code>* 乘</code><br><code>/ 除</code><br><code>% 取模（相除后的余数）</code><br><code>** 取幂</code><br><code>// 相除后向下取整到最接近的整数</code></p>\n<hr>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span></span><br><span class=\"line\">y = <span class=\"number\">4</span>   等价于   x, y, z = <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span></span><br><span class=\"line\">z = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>变量命名规则：</p>\n<ol>\n<li><p>变量名称应该要能够描述所存储的值。</p>\n</li>\n<li><p>只能在变量名称中使用常规字母、数字和下划线。不能包含空格，并且需要以字母或下划线开头。</p>\n</li>\n<li><p>不能使用保留字或内置标识符。</p>\n</li>\n<li><p>变量名称的命名方式是全部使用小写字母，并用下划线区分单词。 例：my_variable = 1</p>\n</li>\n</ol>\n<p><img src=\"/img/keywordsinpy.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><code>+=   如：x+=2 equal x=x+2</code><br><code>-=   如：x-=2 equal x=x-2</code><br><code>*=   如：x*=2 equal x=x*2</code></p>\n<hr>\n<h2 id=\"整数和浮点数\"><a href=\"#整数和浮点数\" class=\"headerlink\" title=\"整数和浮点数\"></a>整数和浮点数</h2><p>数字值可以用到两种 python 数据类型：<br>int - 表示整数值<br>float - 表示小数或浮点数值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = int(<span class=\"number\">4.7</span>)   <span class=\"comment\"># x is now an integer 4</span></span><br><span class=\"line\">y = float(<span class=\"number\">4</span>)   <span class=\"comment\"># y is now a float of 4.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(x))</span><br><span class=\"line\">int</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(y))</span><br><span class=\"line\">float</span><br></pre></td></tr></table></figure>\n<p>有个有趣的现象，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">.1</span> + <span class=\"number\">.1</span> + <span class=\"number\">.1</span> == <span class=\"number\">.3</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>Q: 为什么结果是false呢？？？<br>A: 详戳<a href=\"https://docs.python.org/3/tutorial/floatingpoint.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>Q: 如果在 Python 中除以零，会发生什么？<br>A: 如下报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">\"/tmp/vmuser_tnryxwdmhw/quiz.py\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> </span><br><span class=\"line\">print(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python两种报错类型\"><a href=\"#Python两种报错类型\" class=\"headerlink\" title=\"Python两种报错类型\"></a>Python两种报错类型</h2><ol>\n<li>异常 代码运行时发生的问题</li>\n<li>语法错误  Python 在运行代码之前检查代码时发现的问题<br>详戳<a href=\"https://docs.python.org/3/tutorial/errors.html\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n</ol>\n<hr>\n<h2 id=\"布尔运算符、比较运算符、逻辑运算符\"><a href=\"#布尔运算符、比较运算符、逻辑运算符\" class=\"headerlink\" title=\"布尔运算符、比较运算符、逻辑运算符\"></a>布尔运算符、比较运算符、逻辑运算符</h2><ol>\n<li>布尔运算符：True 或 False，分别表示为 1 或 0<br>通常有 6 个比较运算符会获得布尔值：&lt;、&gt;、&lt;=、&gt;=、==、!=</li>\n<li>比较运算符：<table>\n<thead>\n<tr>\n<th>符号举例</th>\n<th>布尔型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 &lt; 3</td>\n<td>False</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>5 &gt; 3</td>\n<td>True</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>3 &lt;= 3</td>\n<td>True</td>\n<td>小于或等于</td>\n</tr>\n<tr>\n<td>3 &gt;= 5</td>\n<td>False</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>3 == 5</td>\n<td>False</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>3 != 5</td>\n<td>True</td>\n<td>不等于</td>\n</tr>\n</tbody></table>\n</li>\n<li>逻辑运算符：and、or、not<table>\n<thead>\n<tr>\n<th>逻辑使用情况</th>\n<th>布尔型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 &lt; 3 and 5 == 5</td>\n<td>False</td>\n<td>and - 检查提供的所有语句是否都为 True</td>\n</tr>\n<tr>\n<td>5 &lt; 3 or 5 == 5</td>\n<td>True</td>\n<td>or - 检查是否至少有一个语句为 True</td>\n</tr>\n<tr>\n<td>not 5 &lt; 3</td>\n<td>True</td>\n<td>not - 翻转布尔值</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<hr>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在 python 中，字符串的变量类型显示为 str。你可以使用双引号 “ 或单引号 ‘ 定义字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string1 = <span class=\"string\">'Hello string1!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string2 = <span class=\"string\">\"Hello string2!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string3 = <span class=\"string\">'This is YC\\'s website.'</span> <span class=\"comment\">#在字符串中使用 \\ 当做转义字符</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"字符串操作与方法\"><a href=\"#字符串操作与方法\" class=\"headerlink\" title=\"字符串操作与方法\"></a>字符串操作与方法</h3><ol>\n<li><p>字符串拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_word = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>second_word = <span class=\"string\">'World'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word + second_word)</span><br><span class=\"line\">HelloWorld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word + <span class=\"string\">' '</span> + second_word)</span><br><span class=\"line\">Hello World</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word * <span class=\"number\">5</span>)</span><br><span class=\"line\">HelloHelloHelloHelloHello</span><br></pre></td></tr></table></figure></li>\n<li><p>字符串长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(len(first_word))</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>Q：如果len函数的参数是整数835，函数 len 会返回什么？<br>A：error</p>\n</li>\n<li><p>字符串索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_word[<span class=\"number\">0</span>]</span><br><span class=\"line\">H</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>second_word[<span class=\"number\">1</span>]</span><br><span class=\"line\">o</span><br></pre></td></tr></table></figure></li>\n<li><p>等等<br><img src=\"/img/str1.png\" alt=\"\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.islower() <span class=\"comment\">#字符串是否小写</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.count(<span class=\"string\">'a'</span>) <span class=\"comment\">#字母a的个数</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.find(<span class=\"string\">'a'</span>) <span class=\"comment\">#字母a的位置，如果有多个字母a，则返回第一个的位置</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>可见，count 和 find 方法都接受另一个参数。islower 方法不接受参数。</p>\n</li>\n<li><p>更多内容戳<a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\" target=\"_blank\" rel=\"noopener\">字符串方法文档</a></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"类型和类型转换\"><a href=\"#类型和类型转换\" class=\"headerlink\" title=\"类型和类型转换\"></a>类型和类型转换</h2><p>四种数据类型：整型、浮点型、布尔型、字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"number\">5</span>))</span><br><span class=\"line\">int</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"number\">4.8</span>))</span><br><span class=\"line\">float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"string\">'what'</span>))</span><br><span class=\"line\">str</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\">bool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"0\"</span> + <span class=\"string\">\"5\"</span>)</span><br><span class=\"line\"><span class=\"string\">'05'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">0</span> + <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">0</span> + <span class=\"string\">\"5\"</span>)</span><br><span class=\"line\">TypeError: unsupported operand type(s) <span class=\"keyword\">for</span> +: <span class=\"string\">'int'</span> <span class=\"keyword\">and</span> <span class=\"string\">'str'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"0\"</span> + <span class=\"number\">5</span>)</span><br><span class=\"line\">TypeError: can only concatenate str (<span class=\"keyword\">not</span> <span class=\"string\">\"int\"</span>) to str</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h3><p>使用[]创建列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>, <span class=\"number\">2.5</span>, <span class=\"string\">'3'</span>, true]</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表索引\"><a href=\"#列表索引\" class=\"headerlink\" title=\"列表索引\"></a>列表索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">0</span>] <span class=\"comment\">#获取第一个元素</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>] <span class=\"comment\">#获取第3个元素</span></span><br><span class=\"line\"><span class=\"number\">2.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(len(list) - <span class=\"number\">1</span>) <span class=\"comment\">#获取最后一个元素</span></span><br><span class=\"line\">true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"number\">-1</span>) <span class=\"comment\">#获取最后一个元素</span></span><br><span class=\"line\">true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"number\">-2</span>) <span class=\"comment\">#获取倒数第二个元素</span></span><br><span class=\"line\"><span class=\"string\">'3'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列表切片\"><a href=\"#列表切片\" class=\"headerlink\" title=\"列表切片\"></a>列表切片</h3><ol>\n<li>使用切片功能从列表中提取多个值。在使用切片功能时，务必注意，<strong>起始索引包含在内，终止索引排除在外</strong>。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"number\">2.5</span></span><br></pre></td></tr></table></figure></li>\n<li>要从列表的开头开始，也可以省略起始值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[:<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2.5</span>]</span><br></pre></td></tr></table></figure></li>\n<li>返回到列表结尾的所有值，可以忽略最后一个元素。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>:]</span><br><span class=\"line\">[<span class=\"number\">2.5</span>, <span class=\"string\">'3'</span>, true]</span><br></pre></td></tr></table></figure></li>\n<li><strong>in</strong> OR <strong>not in</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'wor'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'low'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"可变性和顺序\"><a href=\"#可变性和顺序\" class=\"headerlink\" title=\"可变性和顺序\"></a>可变性和顺序</h3><ol>\n<li>可变性：对象创建完毕后，是否可以更改该对象。<br>如果对象（例如列表）可以更改，则是可变的。如果无法更改对象以创建全新的对象（例如字符串），则该对象是不可变的。<br>列表可变：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">0</span>] = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'one'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n字符串不可变：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string = <span class=\"string\">\"Hello YC\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string[<span class=\"number\">0</span>] = <span class=\"string\">'M'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Hello YC\"</span></span><br></pre></td></tr></table></figure></li>\n<li>字符串和列表都是有序的。有些数据类型是无序的。</li>\n<li><strong>对于你要使用的每种数据类型，注意两个事项：</strong><br> <strong>可变吗？</strong><br> <strong>有序吗？</strong></li>\n</ol>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><ol>\n<li>len() 返回列表中的元素数量</li>\n<li>max() 返回列表中的最大元素。<br> 最大元素的判断依据是列表中的对象类型。<br> 数字列表中的最大元素是最大的数字。<br> 字符串列表中的最大元素是按照字母顺序排序时排在最后一位的元素。<br> 因为 max() 函数的定义依据是大于比较运算符。如果列表包含不同的无法比较类型的元素，则 max() 的结果是 undefined。</li>\n<li>min() 返回列表中的最小元素。它是 max() 函数的对立面，返回列表中的最小元素。</li>\n<li>sorted() 返回一个从最小到最大排序的列表<strong>副本</strong>，<strong>并使原始列表保持不变</strong>。</li>\n<li>join 是一个字符串方法，将字符串列表作为参数，并返回一个由列表元素组成并由分隔符字符串分隔的字符串。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_str = <span class=\"string\">\"\\n\"</span>.join([<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_str)</span><br><span class=\"line\"><span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"string\">\"def\"</span></span><br><span class=\"line\"><span class=\"string\">\"ghi\"</span></span><br><span class=\"line\"><span class=\"string\">\"jkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_class = <span class=\"string\">\"-\"</span>.join([<span class=\"string\">\"Class\"</span>, <span class=\"string\">\"D\"</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_class)</span><br><span class=\"line\"><span class=\"string\">\"Class-D\"</span></span><br></pre></td></tr></table></figure></li>\n<li>append方法将元素添加到列表末尾<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_num.append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_num)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h2><p>不可变有序元素数据类型。通常用来存储相关的信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_figure = (<span class=\"number\">165</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Height:\"</span>, my_figure[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Weight:\"</span>, my_figure[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>与列表相同的是，它们都存储一个有序的对象集合，并且可以通过索引访问这些对象。<br>与列表不同的是，元组不可变，你无法向元组中添加项目或从中删除项目，或者直接对元组排序。</p>\n<p>元组还可以用来以紧凑的方式为多个变量赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dimensions = <span class=\"number\">52</span>, <span class=\"number\">40</span>, <span class=\"number\">100</span> <span class=\"comment\">#可以忽略小括号，不影响解释代码</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>length, width, height = dimensions <span class=\"comment\"># 元组解包: 根据元组 dimensions 的内容为三个变量赋了值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果我们不需要直接使用 dimensions，可以将这两行代码简写为一行，一次性为三个变量赋值！</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"The dimensions are &#123;&#125; x &#123;&#125; x &#123;&#125;\"</span>.format(length, width, height)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"The dimensions are 52 x 40 x 100\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：列表是可变有序的，元祖是不可变有序的</p>\n</blockquote>\n<hr>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合是一个包含唯一元素的可变无序集合数据类型。<br>集合的一个用途是快速删除列表中的重复项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; my_numbers &#x3D; [1, 2, 3, 4, 1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; unique_nums &#x3D; set(my_numbers)</span><br><span class=\"line\">&gt;&gt;&gt; print(unique_nums)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>\n<p>集合和列表一样支持 in 运算符。<br>和列表相似，你可以使用 add 方法将元素添加到集合中，并使用 pop 方法删除元素。<br>但是，当你从集合中拿出元素时，会随机删除一个元素。注意和列表不同，集合是无序的，因此没有“最后一个元素”。<br>你可以对集合执行的其他操作包括可以对数学集合执行的操作。可以对集合轻松地执行 union、intersection 和 difference 等方法，并且与其他容器相比，速度快了很多。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruit = &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"grapefruit\"</span>&#125;  <span class=\"comment\"># define a set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"watermelon\"</span> <span class=\"keyword\">in</span> fruit)  <span class=\"comment\"># check for element</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruit.add(<span class=\"string\">\"watermelon\"</span>)  <span class=\"comment\"># add an element</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit.pop())  <span class=\"comment\"># remove a random element</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">&#123;<span class=\"string\">'grapefruit'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'watermelon'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>&#125;</span><br><span class=\"line\">grapefruit</span><br><span class=\"line\">&#123;<span class=\"string\">'orange'</span>, <span class=\"string\">'watermelon'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>检测学习成果来了，下面这个有趣的问题，你认为5还会在b集合中吗?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.add(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.pop()</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"字典和恒等运算符\"><a href=\"#字典和恒等运算符\" class=\"headerlink\" title=\"字典和恒等运算符\"></a>字典和恒等运算符</h2><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>字典是可变数据类型，其中存储的是唯一键到值的映射。下面是存储元素和相应原子序数的字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruits = &#123;<span class=\"string\">\"apple\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"orange\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"lemon\"</span>: <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>字典的键可以是任何<strong>不可变类型</strong>，例如整数或元组，而不仅仅是字符串。<br>每个键都不一定要是相同的类型！使用方括号并在括号里放入键，查询字典中的值或向字典中插入新值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits[<span class=\"string\">\"orange\"</span>])  <span class=\"comment\"># print the value mapped to \"orange\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruits[<span class=\"string\">\"peach\"</span>] = <span class=\"number\">5</span>  <span class=\"comment\"># insert \"peach\" with a value of 5 into the dictionary</span></span><br></pre></td></tr></table></figure>\n<p>检查某个值是否在列表或集合中一样，使用关键字 in 检查值是否在字典中。字典有一个也很有用的相关方法，叫做 get。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"lemon\"</span> <span class=\"keyword\">in</span> fruits)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits.get(<span class=\"string\">\"pineapple\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits[<span class=\"string\">\"pineapple\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\">KeyError错误</span><br></pre></td></tr></table></figure>\n<p>lemon 位于该字典中，因此输出 pineapple 不在字典中，因此 get 返回 None，然后系统输出 None。</p>\n<blockquote>\n<p>如果你预计查询有时候会失败，get 可能比普通的方括号查询更合适，因为错误可能会使程序崩溃。</p>\n</blockquote>\n<p>Q:以下哪些项可以用作字典的键？（多选）<br>  A. str<br>  B. list<br>  C. int<br>  D. float</p>\n<h3 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>is</td>\n<td>检查两边是否恒等</td>\n</tr>\n<tr>\n<td>is not</td>\n<td>检查两边是否不恒等</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>你可以使用运算符 is 检查某个键是否返回了 None。或者使用 is not 检查是否没有返回 None。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result = fruits.get(<span class=\"string\">\"pineapple\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(result <span class=\"keyword\">is</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(result <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>Q:检查是否相等或恒等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a == b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a <span class=\"keyword\">is</span> b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a == c)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a <span class=\"keyword\">is</span> c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h2><p>在容器中包含容器，就可以创建复合数据结构。例如，下面的字典将键映射到也是字典的值！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data = &#123;<span class=\"string\">\"hydrogen\"</span>: &#123;<span class=\"string\">\"number\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"weight\"</span>: <span class=\"number\">1.00794</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"symbol\"</span>: <span class=\"string\">\"H\"</span>&#125;,</span><br><span class=\"line\">              <span class=\"string\">\"helium\"</span>: &#123;<span class=\"string\">\"number\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"weight\"</span>: <span class=\"number\">4.002602</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"symbol\"</span>: <span class=\"string\">\"He\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>访问这个嵌套字典中的元素:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>helium = data[<span class=\"string\">\"helium\"</span>]  <span class=\"comment\"># get the helium dictionary</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hydrogen_weight = elements[<span class=\"string\">\"hydrogen\"</span>][<span class=\"string\">\"weight\"</span>]  <span class=\"comment\"># get hydrogen's weight</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结：<br>列表:有序、可变、使用.append添加项目<br>集合：无序、可变、使用.add添加项目<br>字典：无序、可嵌套</p>\n</blockquote>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>数据结构<table>\n<thead>\n<tr>\n<th>Data Structure</th>\n<th>Ordered</th>\n<th>Mutable</th>\n<th>Constructor</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int</td>\n<td>NA</td>\n<td>NA</td>\n<td>int()</td>\n<td>5</td>\n</tr>\n<tr>\n<td>float</td>\n<td>NA</td>\n<td>NA</td>\n<td>float()</td>\n<td>6.5</td>\n</tr>\n<tr>\n<td>string</td>\n<td>Yes</td>\n<td>No</td>\n<td>‘ ‘ or “ “ or str()</td>\n<td>“this is a string”</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>NA</td>\n<td>NA</td>\n<td>NA</td>\n<td>True or False</td>\n</tr>\n<tr>\n<td>list</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>[ ] or list()</td>\n<td>[5, ‘yes’, 5.7]</td>\n</tr>\n<tr>\n<td>tuple</td>\n<td>Yes</td>\n<td>No</td>\n<td>( ) or tuple()</td>\n<td>(5, ‘yes’, 5.7)</td>\n</tr>\n<tr>\n<td>set</td>\n<td>No</td>\n<td>Yes</td>\n<td>{ } or set()</td>\n<td>{5, ‘yes’, 5.7}</td>\n</tr>\n<tr>\n<td>dictionary</td>\n<td>No</td>\n<td>Keys: No</td>\n<td>{ } or dict()</td>\n<td>{‘Jun’:75, ‘Jul’:89}</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!-- ## 数据类型和运算符 -->\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p><code>+ 加</code><br><code>- 减</code><br><code>* 乘</code><br><code>/ 除</code><br><code>% 取模（相除后的余数）</code><br><code>** 取幂</code><br><code>// 相除后向下取整到最接近的整数</code></p>\n<hr>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span></span><br><span class=\"line\">y = <span class=\"number\">4</span>   等价于   x, y, z = <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span></span><br><span class=\"line\">z = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>变量命名规则：</p>\n<ol>\n<li><p>变量名称应该要能够描述所存储的值。</p>\n</li>\n<li><p>只能在变量名称中使用常规字母、数字和下划线。不能包含空格，并且需要以字母或下划线开头。</p>\n</li>\n<li><p>不能使用保留字或内置标识符。</p>\n</li>\n<li><p>变量名称的命名方式是全部使用小写字母，并用下划线区分单词。 例：my_variable = 1</p>\n</li>\n</ol>\n<p><img src=\"/img/keywordsinpy.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><code>+=   如：x+=2 equal x=x+2</code><br><code>-=   如：x-=2 equal x=x-2</code><br><code>*=   如：x*=2 equal x=x*2</code></p>\n<hr>\n<h2 id=\"整数和浮点数\"><a href=\"#整数和浮点数\" class=\"headerlink\" title=\"整数和浮点数\"></a>整数和浮点数</h2><p>数字值可以用到两种 python 数据类型：<br>int - 表示整数值<br>float - 表示小数或浮点数值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = int(<span class=\"number\">4.7</span>)   <span class=\"comment\"># x is now an integer 4</span></span><br><span class=\"line\">y = float(<span class=\"number\">4</span>)   <span class=\"comment\"># y is now a float of 4.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(x))</span><br><span class=\"line\">int</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(y))</span><br><span class=\"line\">float</span><br></pre></td></tr></table></figure>\n<p>有个有趣的现象，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">.1</span> + <span class=\"number\">.1</span> + <span class=\"number\">.1</span> == <span class=\"number\">.3</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>Q: 为什么结果是false呢？？？<br>A: 详戳<a href=\"https://docs.python.org/3/tutorial/floatingpoint.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>Q: 如果在 Python 中除以零，会发生什么？<br>A: 如下报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">\"/tmp/vmuser_tnryxwdmhw/quiz.py\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> </span><br><span class=\"line\">print(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python两种报错类型\"><a href=\"#Python两种报错类型\" class=\"headerlink\" title=\"Python两种报错类型\"></a>Python两种报错类型</h2><ol>\n<li>异常 代码运行时发生的问题</li>\n<li>语法错误  Python 在运行代码之前检查代码时发现的问题<br>详戳<a href=\"https://docs.python.org/3/tutorial/errors.html\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n</ol>\n<hr>\n<h2 id=\"布尔运算符、比较运算符、逻辑运算符\"><a href=\"#布尔运算符、比较运算符、逻辑运算符\" class=\"headerlink\" title=\"布尔运算符、比较运算符、逻辑运算符\"></a>布尔运算符、比较运算符、逻辑运算符</h2><ol>\n<li>布尔运算符：True 或 False，分别表示为 1 或 0<br>通常有 6 个比较运算符会获得布尔值：&lt;、&gt;、&lt;=、&gt;=、==、!=</li>\n<li>比较运算符：<table>\n<thead>\n<tr>\n<th>符号举例</th>\n<th>布尔型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 &lt; 3</td>\n<td>False</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>5 &gt; 3</td>\n<td>True</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>3 &lt;= 3</td>\n<td>True</td>\n<td>小于或等于</td>\n</tr>\n<tr>\n<td>3 &gt;= 5</td>\n<td>False</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>3 == 5</td>\n<td>False</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>3 != 5</td>\n<td>True</td>\n<td>不等于</td>\n</tr>\n</tbody></table>\n</li>\n<li>逻辑运算符：and、or、not<table>\n<thead>\n<tr>\n<th>逻辑使用情况</th>\n<th>布尔型</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5 &lt; 3 and 5 == 5</td>\n<td>False</td>\n<td>and - 检查提供的所有语句是否都为 True</td>\n</tr>\n<tr>\n<td>5 &lt; 3 or 5 == 5</td>\n<td>True</td>\n<td>or - 检查是否至少有一个语句为 True</td>\n</tr>\n<tr>\n<td>not 5 &lt; 3</td>\n<td>True</td>\n<td>not - 翻转布尔值</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<hr>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在 python 中，字符串的变量类型显示为 str。你可以使用双引号 “ 或单引号 ‘ 定义字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string1 = <span class=\"string\">'Hello string1!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string2 = <span class=\"string\">\"Hello string2!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string3 = <span class=\"string\">'This is YC\\'s website.'</span> <span class=\"comment\">#在字符串中使用 \\ 当做转义字符</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"字符串操作与方法\"><a href=\"#字符串操作与方法\" class=\"headerlink\" title=\"字符串操作与方法\"></a>字符串操作与方法</h3><ol>\n<li><p>字符串拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_word = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>second_word = <span class=\"string\">'World'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word + second_word)</span><br><span class=\"line\">HelloWorld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word + <span class=\"string\">' '</span> + second_word)</span><br><span class=\"line\">Hello World</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(first_word * <span class=\"number\">5</span>)</span><br><span class=\"line\">HelloHelloHelloHelloHello</span><br></pre></td></tr></table></figure></li>\n<li><p>字符串长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(len(first_word))</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>Q：如果len函数的参数是整数835，函数 len 会返回什么？<br>A：error</p>\n</li>\n<li><p>字符串索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_word[<span class=\"number\">0</span>]</span><br><span class=\"line\">H</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>second_word[<span class=\"number\">1</span>]</span><br><span class=\"line\">o</span><br></pre></td></tr></table></figure></li>\n<li><p>等等<br><img src=\"/img/str1.png\" alt=\"\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.islower() <span class=\"comment\">#字符串是否小写</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.count(<span class=\"string\">'a'</span>) <span class=\"comment\">#字母a的个数</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string.find(<span class=\"string\">'a'</span>) <span class=\"comment\">#字母a的位置，如果有多个字母a，则返回第一个的位置</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>可见，count 和 find 方法都接受另一个参数。islower 方法不接受参数。</p>\n</li>\n<li><p>更多内容戳<a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\" target=\"_blank\" rel=\"noopener\">字符串方法文档</a></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"类型和类型转换\"><a href=\"#类型和类型转换\" class=\"headerlink\" title=\"类型和类型转换\"></a>类型和类型转换</h2><p>四种数据类型：整型、浮点型、布尔型、字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"number\">5</span>))</span><br><span class=\"line\">int</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"number\">4.8</span>))</span><br><span class=\"line\">float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"string\">'what'</span>))</span><br><span class=\"line\">str</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\">bool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"0\"</span> + <span class=\"string\">\"5\"</span>)</span><br><span class=\"line\"><span class=\"string\">'05'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">0</span> + <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">0</span> + <span class=\"string\">\"5\"</span>)</span><br><span class=\"line\">TypeError: unsupported operand type(s) <span class=\"keyword\">for</span> +: <span class=\"string\">'int'</span> <span class=\"keyword\">and</span> <span class=\"string\">'str'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"0\"</span> + <span class=\"number\">5</span>)</span><br><span class=\"line\">TypeError: can only concatenate str (<span class=\"keyword\">not</span> <span class=\"string\">\"int\"</span>) to str</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h3><p>使用[]创建列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>, <span class=\"number\">2.5</span>, <span class=\"string\">'3'</span>, true]</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表索引\"><a href=\"#列表索引\" class=\"headerlink\" title=\"列表索引\"></a>列表索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">0</span>] <span class=\"comment\">#获取第一个元素</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>] <span class=\"comment\">#获取第3个元素</span></span><br><span class=\"line\"><span class=\"number\">2.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(len(list) - <span class=\"number\">1</span>) <span class=\"comment\">#获取最后一个元素</span></span><br><span class=\"line\">true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"number\">-1</span>) <span class=\"comment\">#获取最后一个元素</span></span><br><span class=\"line\">true</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"number\">-2</span>) <span class=\"comment\">#获取倒数第二个元素</span></span><br><span class=\"line\"><span class=\"string\">'3'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列表切片\"><a href=\"#列表切片\" class=\"headerlink\" title=\"列表切片\"></a>列表切片</h3><ol>\n<li>使用切片功能从列表中提取多个值。在使用切片功能时，务必注意，<strong>起始索引包含在内，终止索引排除在外</strong>。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"number\">2.5</span></span><br></pre></td></tr></table></figure></li>\n<li>要从列表的开头开始，也可以省略起始值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[:<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2.5</span>]</span><br></pre></td></tr></table></figure></li>\n<li>返回到列表结尾的所有值，可以忽略最后一个元素。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">1</span>:]</span><br><span class=\"line\">[<span class=\"number\">2.5</span>, <span class=\"string\">'3'</span>, true]</span><br></pre></td></tr></table></figure></li>\n<li><strong>in</strong> OR <strong>not in</strong><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'wor'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'low'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"可变性和顺序\"><a href=\"#可变性和顺序\" class=\"headerlink\" title=\"可变性和顺序\"></a>可变性和顺序</h3><ol>\n<li>可变性：对象创建完毕后，是否可以更改该对象。<br>如果对象（例如列表）可以更改，则是可变的。如果无法更改对象以创建全新的对象（例如字符串），则该对象是不可变的。<br>列表可变：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list[<span class=\"number\">0</span>] = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(list)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'one'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n字符串不可变：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string = <span class=\"string\">\"Hello YC\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_string[<span class=\"number\">0</span>] = <span class=\"string\">'M'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Hello YC\"</span></span><br></pre></td></tr></table></figure></li>\n<li>字符串和列表都是有序的。有些数据类型是无序的。</li>\n<li><strong>对于你要使用的每种数据类型，注意两个事项：</strong><br> <strong>可变吗？</strong><br> <strong>有序吗？</strong></li>\n</ol>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><ol>\n<li>len() 返回列表中的元素数量</li>\n<li>max() 返回列表中的最大元素。<br> 最大元素的判断依据是列表中的对象类型。<br> 数字列表中的最大元素是最大的数字。<br> 字符串列表中的最大元素是按照字母顺序排序时排在最后一位的元素。<br> 因为 max() 函数的定义依据是大于比较运算符。如果列表包含不同的无法比较类型的元素，则 max() 的结果是 undefined。</li>\n<li>min() 返回列表中的最小元素。它是 max() 函数的对立面，返回列表中的最小元素。</li>\n<li>sorted() 返回一个从最小到最大排序的列表<strong>副本</strong>，<strong>并使原始列表保持不变</strong>。</li>\n<li>join 是一个字符串方法，将字符串列表作为参数，并返回一个由列表元素组成并由分隔符字符串分隔的字符串。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_str = <span class=\"string\">\"\\n\"</span>.join([<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_str)</span><br><span class=\"line\"><span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"string\">\"def\"</span></span><br><span class=\"line\"><span class=\"string\">\"ghi\"</span></span><br><span class=\"line\"><span class=\"string\">\"jkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_class = <span class=\"string\">\"-\"</span>.join([<span class=\"string\">\"Class\"</span>, <span class=\"string\">\"D\"</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_class)</span><br><span class=\"line\"><span class=\"string\">\"Class-D\"</span></span><br></pre></td></tr></table></figure></li>\n<li>append方法将元素添加到列表末尾<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_num.append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(my_num)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h2><p>不可变有序元素数据类型。通常用来存储相关的信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_figure = (<span class=\"number\">165</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Height:\"</span>, my_figure[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Weight:\"</span>, my_figure[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>与列表相同的是，它们都存储一个有序的对象集合，并且可以通过索引访问这些对象。<br>与列表不同的是，元组不可变，你无法向元组中添加项目或从中删除项目，或者直接对元组排序。</p>\n<p>元组还可以用来以紧凑的方式为多个变量赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dimensions = <span class=\"number\">52</span>, <span class=\"number\">40</span>, <span class=\"number\">100</span> <span class=\"comment\">#可以忽略小括号，不影响解释代码</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>length, width, height = dimensions <span class=\"comment\"># 元组解包: 根据元组 dimensions 的内容为三个变量赋了值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果我们不需要直接使用 dimensions，可以将这两行代码简写为一行，一次性为三个变量赋值！</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"The dimensions are &#123;&#125; x &#123;&#125; x &#123;&#125;\"</span>.format(length, width, height)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"The dimensions are 52 x 40 x 100\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：列表是可变有序的，元祖是不可变有序的</p>\n</blockquote>\n<hr>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合是一个包含唯一元素的可变无序集合数据类型。<br>集合的一个用途是快速删除列表中的重复项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; my_numbers &#x3D; [1, 2, 3, 4, 1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; unique_nums &#x3D; set(my_numbers)</span><br><span class=\"line\">&gt;&gt;&gt; print(unique_nums)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>\n<p>集合和列表一样支持 in 运算符。<br>和列表相似，你可以使用 add 方法将元素添加到集合中，并使用 pop 方法删除元素。<br>但是，当你从集合中拿出元素时，会随机删除一个元素。注意和列表不同，集合是无序的，因此没有“最后一个元素”。<br>你可以对集合执行的其他操作包括可以对数学集合执行的操作。可以对集合轻松地执行 union、intersection 和 difference 等方法，并且与其他容器相比，速度快了很多。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruit = &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"grapefruit\"</span>&#125;  <span class=\"comment\"># define a set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"watermelon\"</span> <span class=\"keyword\">in</span> fruit)  <span class=\"comment\"># check for element</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruit.add(<span class=\"string\">\"watermelon\"</span>)  <span class=\"comment\"># add an element</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit.pop())  <span class=\"comment\"># remove a random element</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">&#123;<span class=\"string\">'grapefruit'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'watermelon'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>&#125;</span><br><span class=\"line\">grapefruit</span><br><span class=\"line\">&#123;<span class=\"string\">'orange'</span>, <span class=\"string\">'watermelon'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>检测学习成果来了，下面这个有趣的问题，你认为5还会在b集合中吗?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = set(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.add(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.pop()</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"字典和恒等运算符\"><a href=\"#字典和恒等运算符\" class=\"headerlink\" title=\"字典和恒等运算符\"></a>字典和恒等运算符</h2><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>字典是可变数据类型，其中存储的是唯一键到值的映射。下面是存储元素和相应原子序数的字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruits = &#123;<span class=\"string\">\"apple\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"orange\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"lemon\"</span>: <span class=\"number\">6</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>字典的键可以是任何<strong>不可变类型</strong>，例如整数或元组，而不仅仅是字符串。<br>每个键都不一定要是相同的类型！使用方括号并在括号里放入键，查询字典中的值或向字典中插入新值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits[<span class=\"string\">\"orange\"</span>])  <span class=\"comment\"># print the value mapped to \"orange\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fruits[<span class=\"string\">\"peach\"</span>] = <span class=\"number\">5</span>  <span class=\"comment\"># insert \"peach\" with a value of 5 into the dictionary</span></span><br></pre></td></tr></table></figure>\n<p>检查某个值是否在列表或集合中一样，使用关键字 in 检查值是否在字典中。字典有一个也很有用的相关方法，叫做 get。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"lemon\"</span> <span class=\"keyword\">in</span> fruits)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits.get(<span class=\"string\">\"pineapple\"</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fruits[<span class=\"string\">\"pineapple\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\">KeyError错误</span><br></pre></td></tr></table></figure>\n<p>lemon 位于该字典中，因此输出 pineapple 不在字典中，因此 get 返回 None，然后系统输出 None。</p>\n<blockquote>\n<p>如果你预计查询有时候会失败，get 可能比普通的方括号查询更合适，因为错误可能会使程序崩溃。</p>\n</blockquote>\n<p>Q:以下哪些项可以用作字典的键？（多选）<br>  A. str<br>  B. list<br>  C. int<br>  D. float</p>\n<h3 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>is</td>\n<td>检查两边是否恒等</td>\n</tr>\n<tr>\n<td>is not</td>\n<td>检查两边是否不恒等</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>你可以使用运算符 is 检查某个键是否返回了 None。或者使用 is not 检查是否没有返回 None。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result = fruits.get(<span class=\"string\">\"pineapple\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(result <span class=\"keyword\">is</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(result <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>Q:检查是否相等或恒等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a == b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a <span class=\"keyword\">is</span> b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a == c)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a <span class=\"keyword\">is</span> c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h2><p>在容器中包含容器，就可以创建复合数据结构。例如，下面的字典将键映射到也是字典的值！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data = &#123;<span class=\"string\">\"hydrogen\"</span>: &#123;<span class=\"string\">\"number\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"weight\"</span>: <span class=\"number\">1.00794</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"symbol\"</span>: <span class=\"string\">\"H\"</span>&#125;,</span><br><span class=\"line\">              <span class=\"string\">\"helium\"</span>: &#123;<span class=\"string\">\"number\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"weight\"</span>: <span class=\"number\">4.002602</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"symbol\"</span>: <span class=\"string\">\"He\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>访问这个嵌套字典中的元素:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>helium = data[<span class=\"string\">\"helium\"</span>]  <span class=\"comment\"># get the helium dictionary</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hydrogen_weight = elements[<span class=\"string\">\"hydrogen\"</span>][<span class=\"string\">\"weight\"</span>]  <span class=\"comment\"># get hydrogen's weight</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结：<br>列表:有序、可变、使用.append添加项目<br>集合：无序、可变、使用.add添加项目<br>字典：无序、可嵌套</p>\n</blockquote>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>数据结构<table>\n<thead>\n<tr>\n<th>Data Structure</th>\n<th>Ordered</th>\n<th>Mutable</th>\n<th>Constructor</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int</td>\n<td>NA</td>\n<td>NA</td>\n<td>int()</td>\n<td>5</td>\n</tr>\n<tr>\n<td>float</td>\n<td>NA</td>\n<td>NA</td>\n<td>float()</td>\n<td>6.5</td>\n</tr>\n<tr>\n<td>string</td>\n<td>Yes</td>\n<td>No</td>\n<td>‘ ‘ or “ “ or str()</td>\n<td>“this is a string”</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>NA</td>\n<td>NA</td>\n<td>NA</td>\n<td>True or False</td>\n</tr>\n<tr>\n<td>list</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>[ ] or list()</td>\n<td>[5, ‘yes’, 5.7]</td>\n</tr>\n<tr>\n<td>tuple</td>\n<td>Yes</td>\n<td>No</td>\n<td>( ) or tuple()</td>\n<td>(5, ‘yes’, 5.7)</td>\n</tr>\n<tr>\n<td>set</td>\n<td>No</td>\n<td>Yes</td>\n<td>{ } or set()</td>\n<td>{5, ‘yes’, 5.7}</td>\n</tr>\n<tr>\n<td>dictionary</td>\n<td>No</td>\n<td>Keys: No</td>\n<td>{ } or dict()</td>\n<td>{‘Jun’:75, ‘Jul’:89}</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n"},{"title":"线性代数（ Linear Algebra ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n## 向量\n\n### 向量 - 数学定义\n向量是有序的数字列表。下图为n维向量：\n![](/img/xl1.png)\n\n\n","source":"_posts/Python/linear-algebra.md","raw":"---\ntitle: 线性代数（ Linear Algebra ）\n# date: 2018-07-16 09:39:40\ntag: [Linear Algebra]\ncategory: \"Python\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n## 向量\n\n### 向量 - 数学定义\n向量是有序的数字列表。下图为n维向量：\n![](/img/xl1.png)\n\n\n","slug":"Python/linear-algebra","published":1,"date":"2022-07-01T07:26:59.990Z","updated":"2022-07-01T07:26:59.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl527shha0024ud9kch7bgzyi","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><h3 id=\"向量-数学定义\"><a href=\"#向量-数学定义\" class=\"headerlink\" title=\"向量 - 数学定义\"></a>向量 - 数学定义</h3><p>向量是有序的数字列表。下图为n维向量：<br><img src=\"/img/xl1.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><h3 id=\"向量-数学定义\"><a href=\"#向量-数学定义\" class=\"headerlink\" title=\"向量 - 数学定义\"></a>向量 - 数学定义</h3><p>向量是有序的数字列表。下图为n维向量：<br><img src=\"/img/xl1.png\" alt=\"\"></p>\n"},{"title":"函数组合（ Compose ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/compose.md","raw":"---\ntitle: 函数组合（ Compose ）\n# date: 2018-07-16 09:39:40\ntag: [Compose]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","slug":"Javascript/FunctionalProgramming/compose","published":1,"date":"2022-07-01T08:55:05.480Z","updated":"2022-07-01T08:55:37.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl57s8y6e0000z59k1hlv4h37","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n"},{"title":"Lodash","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/lodash.md","raw":"---\ntitle: Lodash\n# date: 2018-07-16 09:39:40\ntag: [Lodash]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","slug":"Javascript/FunctionalProgramming/lodash","published":1,"date":"2022-07-01T08:51:00.565Z","updated":"2022-07-01T08:53:46.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl57s8y6m0001z59k8m6dc4mf","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n"},{"title":"柯里化（ Haskell Brooks Curry ）","_content":">**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","source":"_posts/Javascript/FunctionalProgramming/curry.md","raw":"---\ntitle: 柯里化（ Haskell Brooks Curry ）\n# date: 2018-07-16 09:39:40\ntag: [Haskell Brooks Curry]\ncategory: \"Functonal Programming\"\n---\n>**There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b**\n\n\n\n\n","slug":"Javascript/FunctionalProgramming/curry","published":1,"date":"2022-07-01T08:51:12.442Z","updated":"2022-07-01T08:53:22.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl57s8y6r0003z59kdm310ot7","content":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>There is hardly any theory which is more elementray than linear algebra.In spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices. —— Jean Dieudonne\b</strong></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl527rf2b001gud9k5n07hxrk","category_id":"cl525vpe70002uy9ke43297tn","_id":"cl527rf2d001iud9k3pzn8hlz"},{"post_id":"cl527s774001sud9kddh6f3ab","category_id":"cl527ippr000cud9k363j44y5","_id":"cl527s77b001xud9k5r0g8q1j"},{"post_id":"cl527s775001tud9k4cny3v8m","category_id":"cl527ippr000cud9k363j44y5","_id":"cl527s77b001zud9k8c866610"},{"post_id":"cl527s777001vud9kb3vf5h2z","category_id":"cl527ippr000cud9k363j44y5","_id":"cl527s77b0020ud9kc3lte1yv"},{"post_id":"cl527shh80021ud9kdnfybwv8","category_id":"cl525vpeb0006uy9kg3h34p5a","_id":"cl527shhb0026ud9kc3h67kkf"},{"post_id":"cl527shh90022ud9k04tf1i4a","category_id":"cl525vpeb0006uy9kg3h34p5a","_id":"cl527shhc0028ud9k3lssajgq"},{"post_id":"cl527shha0024ud9kch7bgzyi","category_id":"cl525vpeb0006uy9kg3h34p5a","_id":"cl527shhc0029ud9kfdqg31pq"},{"post_id":"cl57s8y6e0000z59k1hlv4h37","category_id":"cl527ippr000cud9k363j44y5","_id":"cl57s8y6s0004z59k04cj25i6"},{"post_id":"cl57s8y6m0001z59k8m6dc4mf","category_id":"cl527ippr000cud9k363j44y5","_id":"cl57s8y6s0005z59kb1pb65vi"},{"post_id":"cl57s8y6r0003z59kdm310ot7","category_id":"cl527ippr000cud9k363j44y5","_id":"cl57s8y6t0008z59kgrw03mnx"}],"PostTag":[{"post_id":"cl527rf2b001gud9k5n07hxrk","tag_id":"cl525vpe80003uy9k3v0eb235","_id":"cl527rf2d001hud9kg9xz7q90"},{"post_id":"cl527s774001sud9kddh6f3ab","tag_id":"cl527nxqe0014ud9k53ni46mu","_id":"cl527s777001uud9k55gk13ie"},{"post_id":"cl527s775001tud9k4cny3v8m","tag_id":"cl527o5lq0016ud9k5k763xvr","_id":"cl527s77a001wud9kgf31gh6n"},{"post_id":"cl527s777001vud9kb3vf5h2z","tag_id":"cl527qqnt001eud9k1z9u125v","_id":"cl527s77b001yud9kexnnbtlp"},{"post_id":"cl527shh80021ud9kdnfybwv8","tag_id":"cl525vpec0007uy9k3zgeba77","_id":"cl527shha0023ud9k69xz2j7z"},{"post_id":"cl527shh90022ud9k04tf1i4a","tag_id":"cl525vpec0007uy9k3zgeba77","_id":"cl527shhb0025ud9kgcf019dp"},{"post_id":"cl527shha0024ud9kch7bgzyi","tag_id":"cl525vped000buy9kf6qoemtn","_id":"cl527shhb0027ud9k8xtnhurq"},{"post_id":"cl57s8y6e0000z59k1hlv4h37","tag_id":"cl57s8y6o0002z59kcng22oza","_id":"cl57s8y6t0007z59k5xkqcnnw"},{"post_id":"cl57s8y6m0001z59k8m6dc4mf","tag_id":"cl57s8y6t0006z59k045c26f9","_id":"cl57s8y6u000az59k8yhl8zep"},{"post_id":"cl57s8y6r0003z59kdm310ot7","tag_id":"cl57s8y6t0009z59k58knbp3v","_id":"cl57s8y6u000bz59kajjyh2p3"}],"Tag":[{"name":"ES6","_id":"cl525vpe80003uy9k3v0eb235"},{"name":"Python","_id":"cl525vpec0007uy9k3zgeba77"},{"name":"Linear Algebra","_id":"cl525vped000buy9kf6qoemtn"},{"name":"Functonal Programming","_id":"cl527iy3g000eud9kd4stfod4"},{"name":"Closure","_id":"cl527nxqe0014ud9k53ni46mu"},{"name":"Higher-order function","_id":"cl527o5lq0016ud9k5k763xvr"},{"name":"Pure functions","_id":"cl527qqnt001eud9k1z9u125v"},{"name":"Compose","_id":"cl57s8y6o0002z59kcng22oza"},{"name":"Lodash","_id":"cl57s8y6t0006z59k045c26f9"},{"name":"Haskell Brooks Curry","_id":"cl57s8y6t0009z59k58knbp3v"}]}}